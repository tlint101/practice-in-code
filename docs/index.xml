<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Practice in Code</title>
<link>https://tlint101.github.io/practice-in-code/index.html</link>
<atom:link href="https://tlint101.github.io/practice-in-code/index.xml" rel="self" type="application/rss+xml"/>
<description>Practice in Code</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 28 Oct 2025 16:00:00 GMT</lastBuildDate>
<item>
  <title>Applying for the Google PhD Fellowship</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/16-Google-PhD-Fellowship.html</link>
  <description><![CDATA[ 



<section id="applying-for-the-google-phd-fellowship" class="level1">
<h1>Applying for the Google PhD Fellowship</h1>
<p>I am happy to announce that I am the recipient of the 2025 Google PhD Fellowship in East Asia. It is a tremendous honor.</p>
<p>Normally on this space, I write about interesting code or what I am currently working on (as well as plugs to my stuff). For this post I wanted to discuss how I prepared my application.</p>
<p>Google does not announce data, but as an international award, the competition must be fierce. That should not discourage anyone from trying. As any sports fan knows, “<a href="https://en.wiktionary.org/wiki/you_miss_100%25_of_the_shots_you_don%27t_take">you miss 100% of the shots you don’t take”</a>.</p>
<p>As a recipient, I like to think that I stand out. Previous awardees in the country of my institution have been computer scientists or computer security researchers. I am in the field of computational chemistry/biology. That is an area that Google at large does not typically dabble in (though they have related subsidiaries).</p>
<p>Importantly, I learned a lot preparing for this application. This is my first “big boy” test. As a recipient, I passed. For those who applied and did not get awarded, it is not a loss. <strong>You learn a lot about yourself when preparing the application</strong>. It is good experience that will teach you crucial skills.</p>
<p><strong>NOTE:</strong> My application and this post was prepared without the aid of AI. No matter how terrible my writing skills may be, I enjoy writing without the crutch of AI. That may be evident in my application and this blog post (excessive rambling <em>is</em> my style).</p>
<section id="application-contents" class="level2">
<h2 class="anchored" data-anchor-id="application-contents">Application Contents</h2>
<p>First, some <em>background of what I know</em>.</p>
<p>The application is separated by regions. Unfortunately for me, my region, East Asia, is lumped in with the United States and Canada. Of the regions, these are the most rigorous. Extra materials I needed included letters of recommendation, transcripts, a 1-page CV of my advisor, and two personal essays (topics given by Google)</p>
<p>Those requirements aren’t the worst. What was the hardest was the required materials for all nominated students - a student CV and a research/dissertation proposal (3 pages max excluding references). The proposal is perhaps the hardest part to prepare.</p>
</section>
<section id="nomination-process" class="level2">
<h2 class="anchored" data-anchor-id="nomination-process">Nomination Process</h2>
<p>Before the application can be submitted, applicants must be nominated by their institution/university. Google has strict rules for this. This process will vary by where you study. The bureaucracy of the school will determine how smooth your application process will be.</p>
<p>There are schools in Taiwan that have regularly nominated students. As far as I can tell, they have a dedicated representative to deal with this process, i.e.&nbsp;selecting the most promising candidate from their school before submitting an application.</p>
<p>For my case, I was the only student nominated by my institution. I am also, as far as I know, the first from my institution to be nominated and to apply for an international fellowship for Google. That meant my institute lacked a dedicated pathway or service to handle nominations. I was able to secure my nomination by leaning on my advisor to navigate the bureaucratic aspects. This is good and bad. It meant my nomination and application was sent out without issues, but receiving the fellowship (which we were not expecting) raised internal issues that I will not get into.</p>
<p>How smoothly your institute/university handles the nomination process will vary.</p>
</section>
<section id="preparing-my-application" class="level2">
<h2 class="anchored" data-anchor-id="preparing-my-application">Preparing My Application</h2>
<p>After the nomination comes the most difficult part - preparing the application. I am lucky to work in a lab with a professor who involves me in grant writing. I find this crucial experience building. Many of my classmates do not get this chance. That is a shame. It leaves many without the skills or know how to prepare their applications for future opportunities.</p>
<p>I approached my application as if I was applying for a grant. There are plenty of blog posts about grant writing. A recent one I found by <a href="https://blog.genesmindsmachines.com/p/how-to-write-an-nsf-grfp-research?r=2ygcy&amp;utm_medium=ios">Dr.&nbsp;Claus Wilke</a> is particularly insightful. Because I had some experience in grant writing, that put me in the right mindset in prepping my application.</p>
<p>Throughout my preparation, I kept the following thoughts in mind:</p>
<section id="dont-worry-about-novelty" class="level3">
<h3 class="anchored" data-anchor-id="dont-worry-about-novelty">Don’t Worry About Novelty</h3>
<p>For many early researchers, it is easy to dream as if their project/research will shake the foundations of science. I too have fallen into this egoistic trap.</p>
<p>The truth is the novel ideas, the ones that truly shake science to its core, is but a wall built on tiny ideas (relevant <a href="https://xkcd.com/3155/">XKCD comic</a>). How we persevere, how our interests guide us, and how rigorous we are in our research will determine how that wall is built.</p>
<p>Your project then does not need to be “novel”. Or at least, it likely won’t be “earth shattering”. In fact, that isn’t - or shouldn’t be - a requirement for a PhD degree either. As nice as it would be to be associated with a genius, the truth is that <strong>most funders want a workable and reasonable plan with potential to move our collective scientific ideas forward</strong>.</p>
</section>
<section id="know-your-audience" class="level3">
<h3 class="anchored" data-anchor-id="know-your-audience">Know Your Audience</h3>
<p>I do not know the reviewers. Is their specialty biology or chemistry? Or are they evolutionary biologists? Since this is Google, more likely the reviewers have a computer science background.</p>
<p>I am not a computer scientist. I am a computational chemist/biologist. I straddle that middle road, building programs for chemistry/biology. It made sense for me to focus less on technical chemistry/biology aspects and more on how my program could augment my research.</p>
<p>That is the trickiest part. <strong>You cannot assume the reviewers will know your research area</strong>. This is especially true when the proposal portion is constrained to 3 pages. Adding images, which I encourage wherever possible, will quickly eat up precious white space. <strong>Knowing what to focus on and what to omit is crucial</strong>.</p>
<p>Likewise, <strong>how you describe your research will be different depending on which fellowship you apply to</strong>. All the big tech companies have a PhD fellowship of some sort. Each should be tailored towards the funder’s focus. For example, NVIDIA would favor a project heavily utilizing their GPUs and CUDA code. Likewise, if applying for a pharmaceutical industry fellowship, then the biochemistry should be stressed.</p>
<p>As this award is from Google, and judging from past winners, I decided to focus more on the computational portion of my work. The strengths, weaknesses, and early results related to my program were more heavily featured in my application.</p>
</section>
<section id="share-preliminary-results" class="level3">
<h3 class="anchored" data-anchor-id="share-preliminary-results">Share Preliminary Results</h3>
<p>When writing a grant for my lab, we always present preliminary findings. This not only <strong>highlights the feasibility of the project</strong>, but also <strong>highlights our technical ability</strong>.</p>
<p>As much as I tried to avoid the most technical chemistry/biology aspects of my project, the results I did share served as an anchor for my arguments and represented my next steps and future work. <strong>The results must be used to back up your project goals</strong>. My results always highlighted how, computationally, it would service my chemistry/biology ideas.</p>
</section>
<section id="be-clear" class="level3">
<h3 class="anchored" data-anchor-id="be-clear">Be Clear</h3>
<p>Remember, the research/dissertation proposal is 3 pages max. Writing is unique. There are many ways to say one thing. When it comes to writing, I am a rambler. I spent a lot of time thinking about the placement of my paragraphs or if my images best convey my ideas. My first draft came in at a hefty 6 pages. Way over the page limit.</p>
<p>I quickly realized that short, simple sentences were better than larger technical sentences. <strong>Read your words out loud</strong>. If they clump in your mouth like marbles, then it probably needs a rewrite.</p>
<p>My final draft came in at just under 3 pages. It was a tight fit and, looking back, I should have cut more. But what I did end with was an application much clearer than when I had started.</p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>In the end, there is also a bit of luck and help sprinkled throughout the process. The main enemies I faced was time and my own self doubt. I would not have gotten this fellowship without the help of my advisor and collaborators.</p>
<p>As nice as it is to be granted this fellowship, the main thing should be improving yourself. <strong>Finishing and submitting the application is an achievement in and of itself.</strong> As an international award, thousands apply. There is no shame in getting a rejection. The best we can do is try again.</p>
<p>Most importantly, the application process teaches you about yourself, your research, and how to communicate better. That is the most important skill of any PhD holder. Applying to the fellowship - any fellowships - is a worthwhile exercise. You will be better for it, no matter the outcome.</p>


</section>
</section>

 ]]></description>
  <category>Writing</category>
  <category>Google</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/16-Google-PhD-Fellowship.html</guid>
  <pubDate>Tue, 28 Oct 2025 16:00:00 GMT</pubDate>
  <media:content url="https://tlint101.github.io/practice-in-code/posts/img/logo_Google.org_Support_FullColor_rgb_stacked.png" medium="image" type="image/png" height="53" width="144"/>
</item>
<item>
  <title>More Colors and Themes</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/15-More-Colors-and-Themes.html</link>
  <description><![CDATA[ 



<p>In <a href="https://tlint101.github.io/practice-in-code/posts/14-Learning-R.html">my last post</a> I talked about R. One of my main drivers to learn R is how pretty the plots are. Of course, there are a ton of other features packed in R and it is still worth learning. However, the algorithms on my social media has been feeding me other interesting blogs. They have led me to <a href="https://github.com/y-sunflower/pypalettes">PyPalettes</a> and <a href="https://github.com/y-sunflower/morethemes?tab=readme-ov-file">MoreThemes</a>. Both of these are easy to use and plug right into matplotlib and seaborn plots. Super handy!</p>
<section id="vanilla-seaborn-plot" class="level2">
<h2 class="anchored" data-anchor-id="vanilla-seaborn-plot">Vanilla Seaborn Plot</h2>
<p>For comparison, here is a basic seaborn plot in Python. Like the last post, this will be the iris dataset. Already scatterplot looks pretty good.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-10-03T08:54:34.030166Z&quot;,&quot;start_time&quot;:&quot;2025-10-03T08:54:33.870411Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iris'</span>)</span>
<span id="cb1-5">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb1-6">sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_width'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>)</span>
<span id="cb1-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sepal Length vs. Sepal Width by Species'</span>)</span>
<span id="cb1-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/15-More-Colors-and-Themes_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="additional-colors-with-pypalettes" class="level2">
<h2 class="anchored" data-anchor-id="additional-colors-with-pypalettes">Additional Colors with PyPalettes</h2>
<p>Matplotlib and Seaborn already comes equipped with handy themes and color names. These can be found here for <a href="https://matplotlib.org/stable/gallery/color/named_colors.html">matplolib</a> and for <a href="https://www.practicalpythonfordatascience.com/ap_seaborn_palette">seaborn</a>. Users can also input additional hex codes for custom color palettes. But for users like me who love colors but cannot decide on which look nice, themes are the best way to go. Unfortunately, there are times that I think the Seaborn themes are not enough. I then agonize over a colorwheele, spending hours tweaking and adjusting to find the right one. Usually they are right.</p>
<p>Enter <a href="https://y-sunflower.github.io/pypalettes/">PyPalettes</a>. This is an easy to use python package that will output a list of hexcodes for matplotlib/seaborn plots. Even better, PyPalettes comes equipped with more than 2,500 different color palettes. These can be cycled through on an <a href="https://python-graph-gallery.com/color-palette-finder/">interactive palette finder</a> with sample code showing how to use them. Very handy!</p>
<section id="using-pypalette" class="level3">
<h3 class="anchored" data-anchor-id="using-pypalette">Using PyPalette</h3>
<p>Using PyPalette is easy. Everything goes through the <strong>load_cmap</strong> function. Then all that is required is the color palette name. There are a lot of them, so the <a href="https://python-graph-gallery.com/color-palette-finder/">interactive palette finder</a> is necessary for first time users or to find your new favorite color palette.</p>
<p>To get these functioning with seaborn, they will need to be converted into a list of hexcodes, which is done using the <strong>.colors</strong> method.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-10-03T08:54:34.117978Z&quot;,&quot;start_time&quot;:&quot;2025-10-03T08:54:34.079845Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pypalettes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_cmap</span>
<span id="cb2-2">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulbasaur"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pokemon #0001</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get list of colors</span></span>
<span id="cb2-5">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cmap.colors</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print hex code</span></span>
<span id="cb2-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(palette)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['#389078FF', '#60D0A0FF', '#184848FF', '#98D048FF', '#70A830FF', '#80E8C0FF', '#506028FF', '#B8F870FF', '#B82820FF', '#F8F8F8FF', '#F86860FF', '#D84840FF', '#C8C8C8FF']</code></pre>
</div>
</div>
<p>Once the list is given, they can be fed directly into the seaborn image using the <strong>palette</strong> argument.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-10-03T08:54:34.212247Z&quot;,&quot;start_time&quot;:&quot;2025-10-03T08:54:34.128316Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_width'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>, palette<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette)</span>
<span id="cb4-2">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb4-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sepal Length vs. Sepal Width by Species'</span>)</span>
<span id="cb4-4">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/var/folders/8b/wl7k2st57fs66kc1p7bwd_h80000gn/T/ipykernel_12018/2748902051.py:1: UserWarning: The palette list has more values (13) than needed (3), which may not be intended.
  sns.scatterplot(data=iris, x='sepal_length', y='sepal_width', hue='species', palette=palette)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/15-More-Colors-and-Themes_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Now to explore the other 2,000+ palettes!</p>
</section>
</section>
<section id="special-themes" class="level2">
<h2 class="anchored" data-anchor-id="special-themes">Special Themes</h2>
<p>But what makes R special, in my eyes, are the special themes available. One of the gold standard figures for any plot enthusiast are the ones produced by the Economist. Lucky for R coders, ggplot2 has a nice theme that can easily replicate the Economist style plots. it is as simple as layering in <strong>theme_economist()</strong> on the plot. Oh, and importing the ggthemes package.</p>
</section>
<section id="adding-themes" class="level2">
<h2 class="anchored" data-anchor-id="adding-themes">Adding Themes</h2>
<p>In my last post, I said what made R special, in my eyes, are the special themes available. Now some of these hard to create themes have been replicated and can be easily plugged into matplotlib/seaborn plots. Including my favorite Economist style plots. Enter <a href="https://github.com/y-sunflower/morethemes">morethemes</a>. This package is by the same developer as PyPallettes (<a href="https://github.com/y-sunflower">yellow sunflower</a>) and they have some cool stuff.</p>
<p>Setting a theme is easy. All that is required is calling the theme before creating and drawing the plot.</p>
<section id="using-morethemes" class="level3">
<h3 class="anchored" data-anchor-id="using-morethemes">Using morethemes</h3>
<p>All that is required to get morethemes working is setting the theme. There are a few to choose from and the documentation lists them (16 as of this writing) with <a href="https://y-sunflower.github.io/morethemes/">examples/demos</a>. Here we will use my favorite, the Economist style.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-10-03T08:54:35.844270Z&quot;,&quot;start_time&quot;:&quot;2025-10-03T08:54:34.220716Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> morethemes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mt</span>
<span id="cb6-2">mt.set_theme(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"economist"</span>)</span></code></pre></div>
</div>
<p>Nothing else is needed. Just create your matplotlib/seaborn plot as normal.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-10-03T08:54:35.995435Z&quot;,&quot;start_time&quot;:&quot;2025-10-03T08:54:35.906553Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iris'</span>)</span>
<span id="cb7-2">sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_width'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>)</span>
<span id="cb7-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sepal Length vs. Sepal Width by Species'</span>)</span>
<span id="cb7-4">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/15-More-Colors-and-Themes_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The figure looks great!</p>
<p>And for users that do not want to install morethemes as a dependency, you can dig into the <a href="https://github.com/y-sunflower/morethemes/blob/main/morethemes/themes.py">morethemes sourcecode</a> or use the function <strong>mt.get_rcparams(“theme_name”)</strong> to find the theme you like then copy and paste the code into your own projects. Like this:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-10-03T08:54:36.009911Z&quot;,&quot;start_time&quot;:&quot;2025-10-03T08:54:36.006205Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">mt.get_rcparams(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"economist"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'font.family': 'Volkhov',
 'ytick.minor.visible': False,
 'xtick.minor.visible': True,
 'xtick.major.size': 6,
 'xtick.minor.size': 3,
 'ytick.major.size': 0,
 'axes.spines.top': False,
 'axes.spines.right': False,
 'axes.spines.left': False,
 'ytick.major.pad': 5,
 'xtick.major.pad': 5,
 'yaxis.labellocation': 'top',
 'xaxis.labellocation': 'right',
 'axes.grid': True,
 'grid.linewidth': 0.4,
 'grid.linestyle': '-',
 'axes.linewidth': 1.2,
 'axes.grid.axis': 'y',
 'text.color': '#3d3d3d',
 'grid.color': '#989797',
 'axes.edgecolor': '#1f1f1f',
 'axes.facecolor': '#e8f4f4',
 'figure.facecolor': '#e8f4f4',
 'axes.prop_cycle': cycler('color', ['#DB444B', '#006BA2', '#3EBCD2', '#379A8B', '#EBB434', '#B4BA39', '#9A607F', '#D1B07C', '#758D99'])}</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Finding packages like this gets me excited. I already spend a lot of time trying to figure out color palettes for my data. Now I have 2,500 to go through. Or if I’m feeling lazy, I can call in one of the nice 16 themes already created.</p>
<p>Thanks to Yellow Sunflower for the nice packages!</p>


</section>

 ]]></description>
  <category>Data Analysis</category>
  <category>Plots</category>
  <category>Python</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/15-More-Colors-and-Themes.html</guid>
  <pubDate>Tue, 07 Oct 2025 16:00:00 GMT</pubDate>
  <media:content url="https://tlint101.github.io/practice-in-code/posts/img/python-economist.png" medium="image" type="image/png" height="118" width="144"/>
</item>
<item>
  <title>Learning R</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/14-Learning-R.html</link>
  <description><![CDATA[ 



<p>I always heard that once you grasp one programming language, it is quick to learn to another. The first one is the hardest. I’ve tried learning a bit of Java, but to no avail. During the early years of the iPhone, I had dreams of building an app, only to never get started with Swift. To be fair, I did not put in as much effort in those endeavors as I should have. Mostly, it is down to not having a workable project/goal in mind. That was different when I was learning Python, with the simple programs I have been able to make and post freely on GitHub. Now as I’ve become comfortable with Python, I have begun exploring other languages to see if they can fit into my workflow. That adage is true - learning a new language is easier once you already know another.</p>
<p>I have known about R for a while. It has always come across as a magical skill. I’ve come across R as figures in many papers. Take this <a href="https://jcheminf.biomedcentral.com/articles/10.1186/s13321-018-0309-4#Fig1">article</a>, where machine learning models and plots were coded using R. Neat stuff! I find many figures produced in R visually pop with easily digestible information. It is true that many figures in R can be produced in Python. That is why I put in a lot of effort in finding or making equivalent(ish) in Python (see Py50). But in the end, they are never exactly right. There are some things that are limiting in Python. Lucky for me, there is a package that makes it easy to combine R plotting with Python.</p>
<section id="plotting-in-python" class="level2">
<h2 class="anchored" data-anchor-id="plotting-in-python">Plotting in Python</h2>
<p>For a comparison, here is a plot in Python. Here I used the popular seaborn pacakge and used the iris dataset. This scatterplot looks pretty good.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-08-29T09:35:33.232968Z&quot;,&quot;start_time&quot;:&quot;2025-08-29T09:35:33.101484Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iris'</span>)</span>
<span id="cb1-5">sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sepal_width'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>)</span>
<span id="cb1-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sepal Length vs. Sepal Width by Species'</span>)</span>
<span id="cb1-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/14-Learning-R_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="making-r-plots-in-python" class="level2">
<h2 class="anchored" data-anchor-id="making-r-plots-in-python">Making R Plots in Python</h2>
<p>During my searches, I came across this package, rpy2, which is an interface to run R scripts in Python. It is easy to install:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">pip install rpy2</span></code></pre></div>
<p>Then, for users in Jupyter Notebook, the rpy2 can be run at the top of with all the imports using:</p>
<pre><code>%load_ext rpy2.ipython</code></pre>
<p>To get R scripts working in Jupyter Notebook, the “<a href="https://github.com/IRkernel/IRkernel">IRkernel</a>” will need to be installed first. This is done by manually downloading R (<a href="https://cran.r-project.org/mirrors.html">here</a>) and then in the terminal or an IDE, install it as:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IRkernel"</span>)</span></code></pre></div>
<p>After that, Jupyter Notebooks should be ready to go. The main thing is making sure that the R extension is used. I imagine using this at the top of the notebook, like when you import Python modules.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-08-29T09:35:34.320181Z&quot;,&quot;start_time&quot;:&quot;2025-08-29T09:35:33.247063Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the R extension</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext rpy2.ipython</span></code></pre></div>
</div>
<p>For the subsequent cell with R script, users would type ‘%%R’ at the top of the cell. Everything else should be the same. here is a code that was copied from the <a href="https://r-graph-gallery.com/package/ggthemes.html">r-graph gallery</a>.</p>
<p>There are some similarities with python, in that you need to import libraries. What most sticks out to me is <strong>&lt;-</strong> used instead of <strong>=</strong> when declaring variables. Otherwise, it is about learning the individual functions, in this case ggplot2 and ggthemes, and layering them in. Running the tutorial script gives you a nice looking scatterplot.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-08-29T09:35:35.608167Z&quot;,&quot;start_time&quot;:&quot;2025-08-29T09:35:34.361494Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>R</span>
<span id="cb6-2">library(ggplot2)</span>
<span id="cb6-3">library(ggthemes)</span>
<span id="cb6-4"></span>
<span id="cb6-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot(iris, aes(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sepal.Length, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sepal.Width, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Species, shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Species)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-6">  geom_point(size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-7">  labs(</span>
<span id="cb6-8">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal Length vs Sepal Width by Species"</span>,</span>
<span id="cb6-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal Length (cm)"</span>,</span>
<span id="cb6-10">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal Width (cm)"</span>,</span>
<span id="cb6-11">    caption <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data source: Iris dataset"</span></span>
<span id="cb6-12">  )</span>
<span id="cb6-13"></span>
<span id="cb6-14">p</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/14-Learning-R_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The figure looks good! It takes a little while to think about, but I think the “layering” of the plot makes more intuitive sense to me in R than in Python. However, that simple plot can also be made in python. I think the default figure looks better than the one produced in Seaborn. Of course, everything could be “touched up”. I have a preference for no grids, and different color palettes. But that doesn’t take away from how good teh plots look with default settings.</p>
</section>
<section id="special-themes" class="level2">
<h2 class="anchored" data-anchor-id="special-themes">Special Themes</h2>
<p>But what makes R special, in my eyes, are the special themes available. One of the gold standard figures for any plot enthusiast are the ones produced by the Economist. Lucky for R coders, ggplot2 has a nice theme that can easily replicate the Economist style plots. it is as simple as layering in <strong>theme_economist()</strong> on the plot. Oh, and importing the ggthemes package.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-08-29T09:35:35.740234Z&quot;,&quot;start_time&quot;:&quot;2025-08-29T09:35:35.624500Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>R</span>
<span id="cb7-2">library(ggplot2)</span>
<span id="cb7-3">library(ggthemes)</span>
<span id="cb7-4"></span>
<span id="cb7-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot(iris, aes(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sepal.Length, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sepal.Width, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Species, shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Species)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-6">  geom_point(size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-7">  labs(</span>
<span id="cb7-8">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal Length vs Sepal Width by Species"</span>,</span>
<span id="cb7-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal Length (cm)"</span>,</span>
<span id="cb7-10">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal Width (cm)"</span>,</span>
<span id="cb7-11">    caption <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data source: Iris dataset"</span></span>
<span id="cb7-12">  )</span>
<span id="cb7-13"></span>
<span id="cb7-14">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme_economist()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/14-Learning-R_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>For my workflow, Python reigns supreme. However, knowing a little R gives me more options for visualizing my data. As I play around with R, I find that I prefer the R method of “layering” in different elements on top of one another. It makes it organized and it seems to follow the way my brain things better. I always found Python to be a hodgepodge of variables slammed together.</p>
<p>This opens up a whole new world of themes and different visualization methods. I”m excited to see what I can do with the min the future!</p>


</section>

 ]]></description>
  <category>Data Analysis</category>
  <category>Plots</category>
  <category>R</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/14-Learning-R.html</guid>
  <pubDate>Tue, 02 Sep 2025 16:00:00 GMT</pubDate>
  <media:content url="https://tlint101.github.io/practice-in-code/posts/img/r-economist.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Announcing the pharmacophore-toolkit!</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/13-Announcing-pharmacophore-toolkit.html</link>
  <description><![CDATA[ 



<section id="introducing-pharmacophore-toolkit" class="level1">
<h1>Introducing pharmacophore-toolkit</h1>
<p>For the past year, I have been absent from this space. That doesn’t mean I haven’t been busy! Lately my interests have shifted to making apps targeting cheminformatics and drug discovery. My target audience is my lab members, but I have also released the tools for the wider public. One that I am happy to have recently created is the <a href="https://github.com/tlint101/pharmacophore-toolkit">pharmacophore-toolkit</a>.</p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>There are plenty of tools available to model Structure-Activity Relationship (SAR). Famous software suites include <a href="https://cresset-group.com">Cresset Flare</a> or <a href="https://www.schrodinger.com/platform/products/maestro/">Schrödinger Maestro</a> (<a href="https://youtu.be/0MbUtgoX3Ys">video tutorial here</a>). I particularly like Flare for their <a href="https://cresset-group.com/software/activityminer/">Activity Miner</a> tool. Schrödinger has a great docking module, but is also equipped with additional computational tools that support molecular designs. The aforementioned programs, and other computational pieces of software that support drug design, are great in their own right.</p>
<p>Nonetheless, many of these tools require a subscription. Depending on your goals, paying for a subscription and not utilizing all of the tools can be a downer. Some software suites may offer an academic license, but with a severe lock on the “fancier” tools. Luckily, there are plenty of open source tools that you can combine, along with some elbow grease, to create a tool that works in a similar way.</p>
<p>Thus, pharmacophore-toolkit was born. I wanted to make a script that is, hopefully, easy to use and can generate informative images for analysis and communication between lab groups.</p>
<p>The below is a short demo adapted from the pharmacophore-toolkit tutorial <a href="https://github.com/tlint101/pharmacophore-toolkit/blob/main/tutorials/pharmacophore_tutorial.ipynb">here</a>.</p>
</section>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<section id="import-modules" class="level3">
<h3 class="anchored" data-anchor-id="import-modules">Import Modules</h3>
<p>In this project, we will import rdkit and the pharmacophore-toolkit (pharmacophore) and their associated modules.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:08.938422Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:08.092943Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AllChem, rdMolAlign</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MolsToGridImage</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pharmacophore <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pharmacophore, Draw, View</span></code></pre></div>
</div>
</section>
<section id="dataset" class="level3">
<h3 class="anchored" data-anchor-id="dataset">Dataset</h3>
<p>The example compounds include three molecules that binds to the serotonin receptor <a href="https://en.wikipedia.org/wiki/5-HT2A_receptor">5HT-2A</a>. This protein belongs to the larger GPCR family of proteins and is famous for having a central role in psychedelic drugs such as LSD and psylocibin mushrooms. Fun stuff! The three molecules in this example will include serotonin (duh!), <a href="https://en.wikipedia.org/wiki/Psilocin">psilocin</a> (🍄), and <a href="https://en.wikipedia.org/wiki/Mescaline">mescaline</a>(🌵).</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.020359Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.007817Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serotonin"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1=CC2=C(C=C1O)C(=CN2)CCN"</span>,</span>
<span id="cb2-2">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psilocin"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN(C)CCc1c[nH]c2cccc(O)c12"</span>,</span>
<span id="cb2-3">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mescaline"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O(c1cc(cc(OC)c1OC)CCN)C"</span>}</span>
<span id="cb2-4"></span>
<span id="cb2-5">mol_smi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> molecules.values()]</span>
<span id="cb2-6">mol_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> molecules.keys()]</span>
<span id="cb2-7">mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mol_smi]</span>
<span id="cb2-8"></span>
<span id="cb2-9">MolsToGridImage(mols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mols, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mol_name)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://tlint101.github.io/practice-in-code/posts/13-Announcing-pharmacophore-toolkit_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="compound-preparation" class="level3">
<h3 class="anchored" data-anchor-id="compound-preparation">Compound Preparation</h3>
<p>For effective pharmacophore modeling, the molecules need to be rendered with their 3D conformation. This can come from a variety of ways. To keep things simple, the 3D conformation of the molecules in this demo will be generated using RDKit.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.066524Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.032531Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generating 3D conformation</span></span>
<span id="cb3-2">mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.AddHs(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mols]</span>
<span id="cb3-3">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AllChem.ETKDGv3()</span>
<span id="cb3-4">ps.randomSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mols:</span>
<span id="cb3-6">    AllChem.EmbedMolecule(m,ps)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aligning the molecules</span></span>
<span id="cb3-9">aligned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mols:</span>
<span id="cb3-11">    mol_aligned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdMolAlign.GetO3A(x,mols[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-12">    aligned.append(mol_aligned.Align())</span></code></pre></div>
</div>
<p>The molecules should now be drawn with 3D coordinates. This can be visualized by drawing the molecules. Notice that the molecules are drawn differently on a 2D plane.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.082700Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.073722Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">mols_noH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.RemoveHs(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mols]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove hydrogens for clarity.</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">MolsToGridImage(mols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mols_noH, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mol_name)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://tlint101.github.io/practice-in-code/posts/13-Announcing-pharmacophore-toolkit_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="pharmacophore" class="level3">
<h3 class="anchored" data-anchor-id="pharmacophore">Pharmacophore</h3>
<p>There are three ways to generate pharmacophores - an interactive 3D widget using py3Dmol, as a .xyz file for use in PyMOL, and as a 2D image as a .png file.</p>
<section id="genearte-pharmacophore-features" class="level4">
<h4 class="anchored" data-anchor-id="genearte-pharmacophore-features">Genearte Pharmacophore Features</h4>
<p>First, the pharmacophore features will need to be generated. As of this version, only one pharmacophore can be generated at a time. In this example, pharmacophores for the first molecule, serotonin, will be generated. this will produce a list of lists, with each list containing the pharmacophore label, its atom position, and XYZ coordinates. Once calculated, this data will be used to render the pharmacophores for the images.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.109613Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.093253Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default</span></span>
<span id="cb5-2">pharm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pharmacophore()</span>
<span id="cb5-3">pharma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pharm.calc_pharm(mols_noH[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-4">pharma</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>[['Donor', (9,), -0.9046174520168838, -2.235699615827842, 0.13645934200480056],
 ['Donor', (12,), 2.949925200279259, -0.15648413497184238, 1.2254205073233995],
 ['Donor', (6,), -2.5995394084260526, 2.931207478597561, -0.5905278269049035],
 ['Aromatic',
  (0, 1, 2, 3, 4, 5),
  -1.8583650464904398,
  0.2926900071440297,
  -0.1871054571985934],
 ['Aromatic',
  (2, 3, 7, 8, 9),
  -0.384216675975982,
  -1.2654866328983938,
  -0.21240652662909393]]</code></pre>
</div>
</div>
</section>
<section id="py3dmol" class="level4">
<h4 class="anchored" data-anchor-id="py3dmol">py3DMol</h4>
<p>The pharmacophores generated above are now ready to be used for generating pharmacophores. Each pharmacophore is represented as a sphere with the centroid located on the atom. Currently, the pharmacophores were only generated once for the first molecule. So while the <strong>view()</strong> method contains a dropdown menu to select from list of molecules, the drawn pharmacophores will only correspond to the pharmacophore list generated from the code block above. In this case, serotonin.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.178729Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.123859Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> View()</span>
<span id="cb7-2">v.view(mols_noH, pharma, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"version_major":2,"version_minor":0,"model_id":"1e2c656cfc0b4051bce1e95f93c568ae","quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p><img src="https://tlint101.github.io/practice-in-code/posts/img/pharmacophore-demo.gif" alt="serotoning-pharmacophore-toolkit" width="35%"></p>
<p><strong>NOTE:</strong> This code block generates an interactive window and is intended for use in Jupyter Notebooks only. It cannot be rendered for this blog post (static webpage). Instead, a gif of the window is included.</p>
<p>The <strong>view()</strong> method can also handle a list of pharmacophores. This has the benefit of changing the pharmacophore spheres with each rendered molecule. This is done by generating multiple pharmacophores and including the results ina list. An example of this is as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.232768Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.194962Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pharma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mols_noH:</span>
<span id="cb8-3">    calc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pharm.calc_pharm(x)</span>
<span id="cb8-4">    pharma.append(calc)</span></code></pre></div>
</div>
</section>
<section id="xyz-file-for-pymol" class="level4">
<h4 class="anchored" data-anchor-id="xyz-file-for-pymol">.xyz file for PyMol</h4>
<p>The pharmacophores-toolkit can generate a .xyz file to be used with PyMOL. This contains information for the pharmacophores - 3D coordinates, sphere color, sphere size, etc. Once this is generated, users can drag and drop this file into their PyMOL application to render the pharmacophore with their molecule. The resulting images should generate pharmacophore spheres superimposed on the molecule. The output will give a message describing the number of pharmacophore features generated.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.240927Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.238741Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">pharm.output_features(savepath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pharma.pml'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of features: 8
Feature visualization script written to pharma.pml.</code></pre>
</div>
</div>
<p>In this case, the pharmacophore features for the last item in the list is generated. This should correspond with mescalin.</p>
<p><img src="https://tlint101.github.io/practice-in-code/posts/img/pharmacophore-pymol-example.png" alt="pharmacophore-pymol-example" width="50%"></p>
<p><strong>NOTE:</strong> A sample image of what this would look like in pymol is given here. Like the interactive module above, the pharmacophores will need to be rendered for each molecule separately. In this example, the pharmacophores for serotonin were generated. The psilocin and mescaline molecules were drawn with the serotonin pharmacophore spheres to highlight their structural differences.</p>
</section>
<section id="a-2d-image" class="level4">
<h4 class="anchored" data-anchor-id="a-2d-image">A 2D Image</h4>
<p>Finally, a 2D image can be generated with spheres highlighting the pharmacophores. Images were drawn using RDKit and colored by their respective pharmacophores.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-07-17T11:08:09.390074Z&quot;,&quot;start_time&quot;:&quot;2025-07-17T11:08:09.262726Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw()</span>
<span id="cb11-2">draw.draw_pharm(mols_noH[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/13-Announcing-pharmacophore-toolkit_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>And that’s it! The final results don’t look that bad. I’ve used it for a side project and, depending on how others go, I may use it for others. I find this a quick and easy way to generate analysis of interesting compounds and it helps explain my ideas to collaborators. Pretty neat!</p>
<p>The final results, as of this writing, only highlights the pharmacophore spheres for a specific molecule. No activity cliffs are considered. Activity cliffs are handy as it more illustrates areas for modification - a common “next step” for drug design. That said, I believe an experienced computational chemist should be able to gauge these design tricks by the images generated using the pharmacophore-toolkit. I would still like to add activity cliffs or something similar in the future. Or if others know how, please set up a pull request!</p>
<p>Thanks for reading!</p>


</section>

 ]]></description>
  <category>Small-Molecules</category>
  <category>Python</category>
  <category>Python Project</category>
  <category>Pharmacophore</category>
  <category>RDKit</category>
  <category>PyMOL</category>
  <category>Drawing</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/13-Announcing-pharmacophore-toolkit.html</guid>
  <pubDate>Tue, 22 Jul 2025 16:00:00 GMT</pubDate>
  <media:content url="https://tlint101.github.io/practice-in-code/posts/img/pharmacophore-demo.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Learning Git</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/12-Learning Git.html</link>
  <description><![CDATA[ 



<section id="learning" class="level2">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p>It has been a good while since I last posted. Time has gotten away from me. Thankfully, I can also fall back on the “I’ve been busy” shtick. I’ll lean on that. A quick glance on my GitHub profile shows that I have been “fairly” busy. So my “excuse” isn’t far off.</p>
<section id="housekeeping" class="level3">
<h3 class="anchored" data-anchor-id="housekeeping">Housekeeping</h3>
<p>Since my last post, I have hit a lot of personal milestones. I’ve become a little more comfortable with coding. As someone who is self-taught, it feels like a huge accomplishment to be able to say that. However, there is always more to learn, to improve, and skills to develop. One of the most important ones is <a href="https://en.wikipedia.org/wiki/Version_control">Version Control</a>.</p>
<p>For those in academia, GitHub is the repository host of choice. Though, I think Codeberg is a good one too and I have begun mirroring many of my projects. Hopefully I can wean myself from Github in the future, since the projects on GitHub is used to train Microsoft’s Copilot, and <a href="https://www.developer-tech.com/news/microsoft-copilot-continues-to-expose-private-github-repositories/">potentially exposing private GitHub repositories</a>. Codeberg, as far as I know, cannot be used to train LLMs.</p>
<p>All of that is for another post or venue. For now, I wanted to share how I use Git and some basic commands I use.</p>
</section>
<section id="how-i-started-using-git" class="level3">
<h3 class="anchored" data-anchor-id="how-i-started-using-git">How I Started Using Git</h3>
<p>As my projects have become bigger and ambitious, it has become vital to record and track the changes to my code. This is a natural progression for any developer.</p>
<p>I started writing my projects in Jupyter Notebooks. I love the ability to write in distinct code blocks and to immediately get results printed on script. It helps that each code block can be run out of order, which allows testing and learning of code or custom API. Importantly, with the mix of code and markdown blocks, Jupyter Notebooks are great ways to communicate, share, and teach others your code.</p>
<p>My original interaction with Jupyter Notebooks was through the traditional portal - the localhost connection. It was simple and easy.</p>
<p>As I got comfortable with simple command scripts, I began making more complicated functions, which requires better organization skills. On the advice of a friend, I began using <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">Integrated Development Environment</a> (IDE)s. There are plenty out there, like <a href="https://code.visualstudio.com">VSCode</a> and <a href="https://www.spyder-ide.org">Spyder</a>. But I gravitated toward the <a href="https://www.jetbrains.com/?var=1">JetBrains</a> software suite - particularly <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> and <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>.</p>
<p>I like the JetBrains software because of the look of the interface and the ability to customize how it looks. I am an insane person and will change my IDE theme each day depending on my mood. Everyone is different, so play around with each one and find one that you like.</p>
<p>A main advantage with PyCharm is its integration with Git. It is there from the get go and ready for set up. Plugin with your GitHub account and users are ready to commit, push, or pull their projects. The GUI made it easy peasy! My workflow became:</p>
<ul>
<li>Create repository on GitHub</li>
<li>Clone repository through PyCharm onto my machine</li>
<li>Code</li>
<li>Commit/Push/Pull as needed</li>
</ul>
<p>It was simple and I got comfortable with that for a long time.</p>
<p>However, PyCharm is mainly “connected” to GitHub. As I begin to transition/mirror projects to Codeberg, I found that the GUI becomes unfriendly and clunky. That has caused me to learn a few command line codes that I found useful.</p>
</section>
<section id="git-commands-i-use" class="level3">
<h3 class="anchored" data-anchor-id="git-commands-i-use">Git Commands I Use</h3>
<p>These command line tools are easy ways to connect a project to Git protocols. Importantly, they do not need a specific IDE to be used. All you need is a terminal/command line interface. It is a step up in my coding abilities!</p>
<p>My main machine is a MacOS. Thus, these commands are used in the Terminal. Depending on your machine, you should be able to copy/paste these commands to get things working too.</p>
<p>Check if git is installed:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span></code></pre></div>
<p>Initialize Git in project folder:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> init</span></code></pre></div>
<p>Confirm git tracking:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> status</span></code></pre></div>
<p>If a git repository is made on your GitHub/Codeberg account:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> remote add origin https://github.com/your-username/repo.git</span></code></pre></div>
<p>If you want to add multiple repositories/remotes to your project or want to check which ones are connected to your project:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> remote <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span></span></code></pre></div>
<p>If you want to rename your remotes:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> remote rename original_name new_name</span></code></pre></div>
<p>Stage all changes in project:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span></code></pre></div>
<p>or if you want to stage specific files:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add name_of_file</span></code></pre></div>
<p>Commit changes:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span></span></code></pre></div>
<p>Push to repository (first time):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push u- origin main</span></code></pre></div>
<p>Push to repository (subsequent times)</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
<p>Pull changes:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> pull</span></code></pre></div>
<p>Those are the main commands that I have learned to use. There are a ton of others that may come in handy to users. I found a nice <a href="https://education.github.com/git-cheat-sheet-education.pdf">cheatsheet here</a>. For my main uses though, I still have the GUI to use. If things break, I hope I can figure things out in the future!</p>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <category>Bash</category>
  <category>Git</category>
  <category>Coding</category>
  <category>GitHub</category>
  <category>Codeberg</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/12-Learning Git.html</guid>
  <pubDate>Tue, 24 Jun 2025 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Drawing Molecules with Datamol</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/11-Draw-Molecules-Datamol.html</link>
  <description><![CDATA[ 



<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>In the <a href="https://tlint101.github.io/practice-in-code/posts/10-Draw-Molecules.html">last post</a> I talked about drawing molecules using RDKit. Anyone in cheminformatics knows about RDKit. It is an essential toolkit. But for anyone starting out, it can be frustrating. Think about the basic drawing steps explained in the last post - define the smiles string, convert it into an RDKit molecule (Chem.MolFromSmiles), and then draw the molecule (Draw.MolToImage). That requires three lines of code each time. Trying to find specific tools within RDKit’s documentation can be a day daunting and frustrating.</p>
<p>Enter <a href="https://docs.datamol.io/stable/tutorials/The_Basics.html">Datamol</a>. This is a toolkit built on top of RDKit. It reduces the molecular drawing steps from three lines of code into one!</p>
<p>That makes Datamol is a great tool to start out with. Datamol has a lot of functions ripped right from RDKit and reduces a lot of RDKit’s bulkiness into one or two lines of code. That makes Datamol perfect for beginners. But this comes with a caveat. Datamol lacks certain features, drawn molecules can be oriented differently compared to RDKit, and Datamol lacks more detailed tools found in RDKit tool. But for most of our needs, like drawing molecules, Datamol makes perfect sense to use.</p>
<p>Here, we will go over the same drawing skills as the last post. Only this time we use Datamol to draw the molecules.</p>
<center>
<img src="https://tlint101.github.io/practice-in-code/posts/img/datamol_example.png">
</center>
</section>
<section id="set-up-data" class="level2">
<h2 class="anchored" data-anchor-id="set-up-data">Set Up Data</h2>
<p>Again, we will focus on 2 molecules - Acetylsalicylic Acid and Ibuprofen. The data is set up as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-03-23T08:54:35.765935Z&quot;,&quot;start_time&quot;:&quot;2024-03-23T08:54:35.759943Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acetylsalicylic Acid'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ibuprofen'</span>],</span>
<span id="cb1-2">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O=C(C)Oc1ccccc1C(=O)O'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(C)Cc1ccc(cc1)[C@@H](C)C(=O)O'</span>]}</span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span>
<span id="cb1-4">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">smiles</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Acetylsalicylic Acid</td>
<td>O=C(C)Oc1ccccc1C(=O)O</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Ibuprofen</td>
<td>CC(C)Cc1ccc(cc1)[C@@H](C)C(=O)O</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="drawing-the-molecule" class="level2">
<h2 class="anchored" data-anchor-id="drawing-the-molecule">Drawing the Molecule</h2>
<p>Like in the last post, the data is loaded in a DataFrame. It will need to be “sliced” for drawing. In this case, we will use Datamol’s to_mol() function. This works in one line of code, unlike RDKit which can take two lines.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-03-23T08:54:36.027393Z&quot;,&quot;start_time&quot;:&quot;2024-03-23T08:54:35.767329Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get smiles for 1 molecule smiles string</span></span>
<span id="cb2-2">aspirin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw molecule</span></span>
<span id="cb2-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.to_mol(aspirin)</span>
<span id="cb2-6">mol</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://tlint101.github.io/practice-in-code/posts/11-Draw-Molecules-Datamol_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The above code is technically not a drawing. What it is is a representation of an RDKit molecule. You can try that yourself by using type(mol). You will get ‘rdkit.Chem.rdchem.Mol’. But the to_mol() is great because the molecule is essentially an RDKit molecule and can be processed using RDKit’s other functions or functions available in Datamol.</p>
<p>Drawing a molecule in Datamol is as simple as using to_image() function. Again, this reads more like traditional English syntax. Here we will draw the molecule as an image. To top it off, we will also add a figure legend for the image.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-03-23T08:54:36.037084Z&quot;,&quot;start_time&quot;:&quot;2024-03-23T08:54:36.028055Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input smiles string and figure legend</span></span>
<span id="cb3-2">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.to_image(aspirin, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drawing Aspirin with Datamol!'</span>, use_svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, outfile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img/datamol_example.png'</span>, mol_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>))</span>
<span id="cb3-3">mol</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://tlint101.github.io/practice-in-code/posts/11-Draw-Molecules-Datamol_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-03-23T08:54:36.042383Z&quot;,&quot;start_time&quot;:&quot;2024-03-23T08:54:36.037805Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input smiles string and figure legend</span></span>
<span id="cb4-2">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.to_image(aspirin, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aspirin'</span>)</span>
<span id="cb4-3">mol</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://tlint101.github.io/practice-in-code/posts/11-Draw-Molecules-Datamol_files/figure-html/cell-5-output-1.svg" class="img-fluid"></p>
</div>
</div>
<p>That looks great! You can also save the image by adding the “outfile” argument. By default, the image will be in .svg format and if you prefer .png, you should also include “useSVG=False” in the parameters too. There are a lot of options and you can dive into them <a href="https://docs.datamol.io/stable/api/datamol.viz.html#datamol.viz.to_image">here</a>.</p>
</section>
<section id="drawing-molecules-in-a-grid" class="level2">
<h2 class="anchored" data-anchor-id="drawing-molecules-in-a-grid">Drawing Molecules in a Grid</h2>
<p>That is all well and good, but what if you want to draw multiple molecules in a grid? Again, that can be accomplished in a single line of code! Even easier, it is done using the same to_image() function!</p>
<p>The main thing to keep in mind is that the to_image() function requires the inputs to be in a list. That is easy to do from our DataFrame. Here we will draw the two molecules with their figure legend in a grid by converting their respective columns into a list.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-03-23T08:54:36.049235Z&quot;,&quot;start_time&quot;:&quot;2024-03-23T08:54:36.043286Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the smiles column and name columns into a list</span></span>
<span id="cb5-2">mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>].tolist()</span>
<span id="cb5-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>].to_list()</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the molecules!</span></span>
<span id="cb5-6">dm.to_image(mols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mols, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>legends, n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mol_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://tlint101.github.io/practice-in-code/posts/11-Draw-Molecules-Datamol_files/figure-html/cell-6-output-1.svg" class="img-fluid"></p>
</div>
</div>
<p>This is subjective, but I think that code reads a lot smoother, especially if you are a native English speaker. Compare that to the way I drew molecules from a list from the previous post:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>]]</span>
<span id="cb6-2">MolsToGridImage(mols, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aspirin'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ibuprofen'</span>])</span></code></pre></div>
<p>I am used to it now, but starting out, that read like a whole different langauge to me! Drawing in Datamol makes more sense, especially with their to_image() script.</p>
</section>
<section id="additional-tools" class="level2">
<h2 class="anchored" data-anchor-id="additional-tools">Additional Tools</h2>
<p>These are simple drawing examples. If you dive deeper into their <a href="https://docs.datamol.io/stable/api/datamol.align.html">API</a>, you will find that Datamol contains a ton of other useful features. Importantly, they are written in a way that makes a little more sense. Some other things that are important for the cheminformatic toolkit include molecular fingerprints or converting drawn molecules into other 1D formats. Again, Datamol offers a syntax that follows the “to_xxx” format. A lot easier for early coders!</p>
<p><strong>At least for the simple things.</strong> If you need more rigorous tools, then you’ll have to continue diving into RDKit or other toolkits available.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Just know that there are a lot of additional drawing options. If you could not tell, I like drawing images and plan on writing more depending on my schedule. In the meantime, it is good to practice these and thinking about how to add more functionality to it.</p>
<p>With RDKit, there are some easy to use tools baked in. You just need to know the right ingredients!</p>
<p>The full notebook with the code can be found <a href="https://github.com/tlint101/practice-in-code/blob/main/notebooks/10-Draw-Molecules.ipynb">here</a>.</p>


</section>

 ]]></description>
  <category>RDKit</category>
  <category>Datamol</category>
  <category>Drawing</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/11-Draw-Molecules-Datamol.html</guid>
  <pubDate>Wed, 27 Mar 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Drawing Molecules</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/10-Draw-Molecules.html</link>
  <description><![CDATA[ 



<section id="starting-small" class="level2">
<h2 class="anchored" data-anchor-id="starting-small">Starting Small</h2>
<p>When I was learning to code, I found it frustrating. My journey took me across different languages by what I wanted to do and by recommendations by others. I found it easy to follow tutorials, but when I tried my own things, nothing ever worked. I stopped and started at least three times and I could never finish anything. It took a while, but I realized what the problem was - <em>I needed to find my own project</em>. As a student in cheminformatics, I was lucky that I have plenty of topics to choose from that will allow me to get better. It helps that, at their core, the topics all use similar toolsets.</p>
<p>But how does anyone start? Nothing complicated for sure. I started small and added complexity.</p>
<p>What better way to start than by learning how to draw molecules? It may sound dumb, but this is one of the most important tools to have in your pocket. Drawing one molecule in a graphical GUI program is easy. Drawing 10? 30? 50? Now that is just torture. Don’t do that to yourself!</p>
<p>So today I wanted to go over a basic skill - drawing molecules using RDKit.</p>
</section>
<section id="set-up-data" class="level2">
<h2 class="anchored" data-anchor-id="set-up-data">Set Up Data</h2>
<p>In this quick tutorial, we will draw 2 molecules. We’ll start small and get more complicated. I want to focus on drawing molecular structures for two drugs many of us may know - Acetylsalicylic Acid and Ibuprofen. Or for anyone well verse with the American market, aspirin and advil, respectively. The data is set up as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-02-27T10:19:15.596122Z&quot;,&quot;start_time&quot;:&quot;2024-02-27T10:19:15.115058Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MolsToGridImage</span>
<span id="cb1-5"></span>
<span id="cb1-6">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acetylsalicylic Acid'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ibuprofen'</span>],</span>
<span id="cb1-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O=C(C)Oc1ccccc1C(=O)O'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(C)Cc1ccc(cc1)[C@@H](C)C(=O)O'</span>]}</span>
<span id="cb1-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span>
<span id="cb1-9">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">smiles</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Acetylsalicylic Acid</td>
<td>O=C(C)Oc1ccccc1C(=O)O</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Ibuprofen</td>
<td>CC(C)Cc1ccc(cc1)[C@@H](C)C(=O)O</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="drawing-the-molecule" class="level2">
<h2 class="anchored" data-anchor-id="drawing-the-molecule">Drawing the Molecule</h2>
<p>Because I loaded up my dataset as a DataFrame, I will need to “slice” the table into a format for drawing. In this case, the important information is the smiles string. My brain works in Tables, but if you prefer, you can write out the smiles string directly for drawing the molecule, i.e.&nbsp;aspirin = ‘O=C(C)Oc1ccccc1C(=O)O’</p>
<p>Next, the smiles string will need to be converted an rdkit molecule object. This is done using <a href="https://www.rdkit.org/docs/GettingStartedInPython.html#reading-single-molecules">MolFromSmiles()</a> function.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-02-27T10:19:15.630071Z&quot;,&quot;start_time&quot;:&quot;2024-02-27T10:19:15.611834Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">aspirin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-2">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(aspirin)</span>
<span id="cb2-3">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolToImage(mol)</span>
<span id="cb2-4">img</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://tlint101.github.io/practice-in-code/posts/10-Draw-Molecules_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><strong>NOTE</strong> If you print out the type of the img object, you will see that it is a PIL object. As such, it can be manipulated using the <a href="https://pillow.readthedocs.io/en/stable/reference/Image.html">PIL Image module</a>. I do not have much experience with that as I am normally quite happy with the default outcomes.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(image))</span></code></pre></div>
<p>Another cool feature is that you can add a legend to the individual images. In this case we can test it out for aspirin.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-02-27T10:19:15.665627Z&quot;,&quot;start_time&quot;:&quot;2024-02-27T10:19:15.623309Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolToImage(mol, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aspirin'</span>)</span>
<span id="cb4-2">img</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://tlint101.github.io/practice-in-code/posts/10-Draw-Molecules_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Drawing a single molecule is all well and good, but what if we wanted to draw multiple molecules? The good news is that RDKit allows this with a <a href="https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html#rdkit.Chem.Draw.MolsToGridImage">MolsToGridImage()</a> function.</p>
<p>To use this, pass a list of RDKit objects into function for drawing.</p>
</section>
<section id="drawing-molecules-in-a-grid" class="level2">
<h2 class="anchored" data-anchor-id="drawing-molecules-in-a-grid">Drawing Molecules in a Grid</h2>
<p>Those examples above are for single compounds. It is a great tool and, when we grasp more complex script, we can quickly draw multiple molecules by looping through a list of smiles strings. That is great, but depending on our aims, individual drawings might not cut it. Enter a neat tool by RDKit - drawing molecules in a grid!</p>
<p>It is as simple as drawing the individual molecules. All that is needed is a list of smiles strings. Like the previous example, more extra information can be added to the image. Here I kept it simple and passed a list of molecule names.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-02-27T10:19:15.666125Z&quot;,&quot;start_time&quot;:&quot;2024-02-27T10:19:15.640479Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>]]</span>
<span id="cb5-2">MolsToGridImage(mols, legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aspirin'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ibuprofen'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://tlint101.github.io/practice-in-code/posts/10-Draw-Molecules_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Just know that there are a lot of additional drawing options. If you could not tell, I like drawing images and plan on writing more depending on my schedule. In the meantime, it is good to practice these and thinking about how to add more functionality to it.</p>
<p>With RDKit, there are some easy to use tools baked in. You just need to know the right ingredients!</p>
<p>The full notebook with the code can be found <a href="https://github.com/tlint101/practice-in-code/blob/main/notebooks/10-Draw-Molecules.ipynb">here</a>.</p>


</section>

 ]]></description>
  <category>RDKit</category>
  <category>Drawing</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/10-Draw-Molecules.html</guid>
  <pubDate>Mon, 26 Feb 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>IC50 or pIC50?</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/9-IC50_or_pIC50.html</link>
  <description><![CDATA[ 



<section id="is-ic50-the-only-way" class="level2">
<h2 class="anchored" data-anchor-id="is-ic50-the-only-way">Is IC50 the Only Way?</h2>
<p>Sometimes it can feel like science is spoken in an unknowable language. Reading figures you see symbols like Å or unit scales for the metric system that make no sense (Does “Kangaroos Hop Down Mountains Drinking Chocolate Milk” even work?!?!?!), especially when starting out. For communicating your work, how the data and the units are represented matters.</p>
<p>That brings me back to IC50. I know, I have mentioned it a lot (see <a href="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart.html">here</a> and <a href="https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50.html">here</a>). In short, IC50 value indicates if a drug can inhibit a protein activity by 50%. It is an important indicator of how potent a drug may be. However, obtaining the IC50 value can vary in so many ways. The drug potency can also be an indication of what stage the drug is in during development pipeline. The end result makes reporting a given drug’s potency muddy, especially when trying to compare potency between compounds or compare structures during the development stages.</p>
<p>This can be seen when comparing drugs in the dummy table below:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T08:48:41.480812Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T08:48:41.476005Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dummy Data</span></span>
<span id="cb1-2">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Drug</th>
<th data-quarto-table-cell-role="th">IC50 (µM)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>30.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 2</td>
<td>60.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 3</td>
<td>0.000345</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 4</td>
<td>0.099000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Drug 5</td>
<td>0.800000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Drug 6</td>
<td>0.940000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Ew.</p>
<p>All reported drugs are in the same units, microMolar (µM), but with varying results. Is Drug 1 50% more potent than Drug 2? Are Drug 5 and Drug 6 differ by 0.14 µM. Does that mean they are equally potent? Reporting results in this way has several issues: - A lot of digits! - Difference in 50% implies 50% increase in potency - <em>Implies linear scale</em></p>
<p>The last point is the most important. Rarely are dose-response curves in the linear scale (though it can happen at times). Instead, dose-response curves are more commonly in logarithmic scale. Drugs can have a broad range of concentrations and a logarithmic scale better captures this for plotting. The logarithmic scale also allow curves to be plotted in a nice sigmoidal curve, which can automatically guide our eyes to the all important 50% response value on the curve.</p>
<p>So there must be a better way, right?</p>
</section>
<section id="pic50---a-scale-that-makes-sense" class="level2">
<h2 class="anchored" data-anchor-id="pic50---a-scale-that-makes-sense">pIC50 - A scale That Makes Sense</h2>
<p>Enter pIC50. This is essentially the negative log of the IC50 in <strong>molar concentration</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?pIC50%20=%20-log_%7B10%7D(IC50)"></p>
<p>This has the advantage of scaling results similar to other logarithmic scales, like the pH scale. This is a handy, because it allows us to quickly gauge a drugs potency. For example:</p>
<ul>
<li>IC50 of 1 µM is 10<sup>-6</sup> M = pIC50 of 6.0</li>
<li>IC50 of 100 nM is 10<sup>-7</sup> M, which is pIC50 = 7.0</li>
<li>IC50 of 10 nM is 10<sup>-8</sup> M, which is pIC50 = 8.0</li>
<li>IC50 of 1 nM is 10<sup>-9</sup> M = pIC50 of 9.0</li>
</ul>
<p><strong>Hey, pIC50 is basically the negative exponent!</strong></p>
<p>The pIC50 scales the results in a more reasonable manner. An IC50 of 100 nM is 10<sup>-7</sup> is equal to a pIC50 of 7.0. Likewise, an IC50 of 50 nM is 5 x10<sup>-8</sup> M, which is also 10<sup>-7.3</sup> M, which is pIC50 = 7.3</p>
<p>Another way of thinking of the pIC50 scale is comparing it to another logarithmic scale - the pH scale. Remember that between each number, from 3 to 4, it is a difference of 10. So a pH of 3 is ten times more acidic than a pH of 4.</p>
<p>This works the same way for pIC50. However, the pIC50 scale has the added benefit of moving in one direction, where the higher number represents greater potency.</p>
<p>This can make a big difference in the reporting of a drug. Remember the first table above? We can quickly convert those values into the pIC50 scale.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T08:48:41.487130Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T08:48:41.481403Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Because units are already in µM, must convert log accordingly</span></span>
<span id="cb2-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pIC50'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log10(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IC50 (µM)'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-3">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Drug</th>
<th data-quarto-table-cell-role="th">IC50 (µM)</th>
<th data-quarto-table-cell-role="th">pIC50</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>30.000000</td>
<td>4.52</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 2</td>
<td>60.000000</td>
<td>4.22</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 3</td>
<td>0.000345</td>
<td>9.46</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 4</td>
<td>0.099000</td>
<td>7.00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Drug 5</td>
<td>0.800000</td>
<td>6.10</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Drug 6</td>
<td>0.940000</td>
<td>6.03</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now that makes the drugs in the table make more sense! The drugs may vary wildly by units, but as pIC50s they are scaled in a manner that can make more intuitive sense. Using the pIC50 of 6.0 (or IC50 of 1,000 nM) as a cutoff, Drug 4, Drug 5, and Drug 6 are the only ones that appear potent. On the pI50 scale, Drug 1 and Drug 2 do not look as appealing.</p>
</section>
<section id="a-real-world-example" class="level2">
<h2 class="anchored" data-anchor-id="a-real-world-example">A Real-World Example</h2>
<p>Another example of how pIC50 can be used is demoed here through the development of Capivasertib (AZD5363). Capivasertib is an AKT kinase inhibitor recently approved in 2023. It is the 7th approved <a href="http://practicalfragments.blogspot.com/2023/11/capivasertib-seventh-approved-fragment.html">fragment-derived drug</a>. It was built around a 7-azaindole core and originally started with an IC50 &gt; 100 µM for AKT. That high IC50 is typical starting point for fragment-based drug design. Looking at the first report of Capivasertib, <a href="https://pubs.acs.org/doi/full/10.1021/jm301762v">published in 2013</a>, we can list the intermediate compound’s and their reported IC50. From there we can scale the results to pIC50 and get a better idea of the compounds potency as it moved through the drug optimization stages.</p>
<p><strong>NOTE</strong> I did not follow the optimization linearly - the IC50 varied between compounds, with some more or less potent depending on the moiety substituted and explored. From the paper, we see that the chemists were able to generate many molecules with very high potency, however issues of selectivity were of great concern, leading to a lot of tweaking. A lot of work was put into the development of Capivasertib (not just potency but selectivity!) and should not be dismissed by my simple demo.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T08:48:41.494340Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T08:48:41.487708Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">demo_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound</th>
<th data-quarto-table-cell-role="th">IC50 (µM)</th>
<th data-quarto-table-cell-role="th">pIC50</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>7-azaindole</td>
<td>100.000</td>
<td>4.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Compound 33</td>
<td>0.276</td>
<td>6.56</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Compound 41</td>
<td>1.313</td>
<td>5.88</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Compound 53</td>
<td>0.030</td>
<td>7.52</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Capivasertib</td>
<td>0.003</td>
<td>8.52</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The IC50 (µM) of the reported intermediates in the published article are, objectively, not good to look at. Especially in Table 3 as the IC50 jumped from 9 nM to almost 2,800 nM depending on the substituent. The above table shows how scaling the IC50 to pIC50 can make the information more intuitive. As the molecule becomes more potent, it will have a higher pIC50 number. Thus, there is a need to forever improve the compound to “achieve” a higher ranking on the pIC50 scale. For Capivarsertib’s case, it has a pIC50 of 8.52 for AKT1.</p>
</section>
<section id="plugs-py50-can-scale-to-pic50" class="level2">
<h2 class="anchored" data-anchor-id="plugs-py50-can-scale-to-pic50">🔌Plugs: py50 Can Scale to pIC50!</h2>
<p>To aid in data representation, py50 comes equipped with a function to scale the IC50 into pIC50. This is performed using the calculate_pic50() function. It is built on top of the calculate_absolute_ic50() function. Thus both the relative and absolute pIC50 will be reported. Again, what you report depends on your dataset. <strong>Use your best judgement!</strong></p>
<p>An example of how this works can be seen below:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T08:48:41.573103Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T08:48:41.509530Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">calculation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_data.calculate_pic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To keep IC50 columns</span></span>
<span id="cb4-3">calculation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculation[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'compound_name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relative ic50 (nM)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'absolute ic50 (nM)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relative pIC50'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'absolute pIC50'</span>]]</span>
<span id="cb4-4"></span>
<span id="cb4-5">calculation.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">relative ic50 (nM)</th>
<th data-quarto-table-cell-role="th">absolute ic50 (nM)</th>
<th data-quarto-table-cell-role="th">relative pIC50</th>
<th data-quarto-table-cell-role="th">absolute pIC50</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>429.96</td>
<td>579.62</td>
<td>6.37</td>
<td>6.24</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 2</td>
<td>423.05</td>
<td>660.69</td>
<td>6.37</td>
<td>6.18</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 3</td>
<td>644.38</td>
<td>921.71</td>
<td>6.19</td>
<td>6.04</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 4</td>
<td>398.60</td>
<td>422.45</td>
<td>6.40</td>
<td>6.37</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now when using py50 to calculate IC50 values, anyone can quickly scale their results to pIC50. Hopefully this will bring a more convenient way to represent and display data to classmates, coworkers, advisors, etc.</p>
<p>For anyone wanting to look further, the full notebook for this post can be found <a href="https://github.com/tlint101/practice-in-code/tree/main/notebooks">here</a>. A good post was has been written up by CDD Vault <a href="https://www.collaborativedrug.com/cdd-blog/why-using-pic50-instead-of-ic50-will-change-your-life">here</a></p>


</section>

 ]]></description>
  <category>small-molecules</category>
  <category>drug discovery</category>
  <category>Informatics</category>
  <category>Python</category>
  <category>py50</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/9-IC50_or_pIC50.html</guid>
  <pubDate>Wed, 17 Jan 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>py50: Relative or Absolute IC50? 🤔</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50.html</link>
  <description><![CDATA[ 



<section id="absolute-ic50" class="level2">
<h2 class="anchored" data-anchor-id="absolute-ic50">Absolute IC50</h2>
<p>I do not know others, but when I first tried calculating IC50, I wanted to pull my teeth out. There is a lot more to know about IC50 than just the calculations and anyone can dive into an endless blackhole of information and never crawl out. Here I will try my best to explain what I know. Plus, it will be good to show off py50 plots. For anyone interested, the main code for this post can be found <a href="https://github.com/tlint101/practice-in-code/blob/main/notebooks/8-absolute-ic50.ipynb">here</a>.</p>
<p><strong>TL;DR</strong> IC50 can be confusing and the final result will depend on the data you have on hand. Use your best judgement!</p>
<section id="so-what-is-an-ic50-value" class="level3">
<h3 class="anchored" data-anchor-id="so-what-is-an-ic50-value">So what is an IC50 value?</h3>
<p>On the surface, IC50 is an easy and fundamental pharmacological concept for researchers to quickly gauge the potency of a drug. It essentially asks - 🤔 <strong>How much of my drug is needed to inhibit my target protein activity by 50%.</strong> 💭 A given drug is tested at different concentrations to achieve this result.</p>
<p>A good introduction has been written up by Dr.&nbsp;Keith Hornberger (<a href="https://krhornberger.substack.com/p/tweetorial-ic50-vs-ki">Tweetorial: IC50 vs.&nbsp;Ki</a>). In the article, there are reasons given for why <strong>IC50 depends on many factors</strong> - the drug being tested, the conditions, which cell, etc. These can all have an influence on the final result.</p>
<p>Graphically, it will look like a sigmoidal plot (<a href="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart.html">see here</a>), where the Y-axis are the drug responses and the X-axis is the concentration. The concentrations on the X-axis are typically, but not always, logarithmic in order to assess the wide variations in the tested drug concentration. We will see that the final <strong>calculated IC50 can be just as ambiguous</strong> as the experiment itself. That brings us to <strong>Relative vs.&nbsp;Absolute</strong> values.</p>
<p>What does <strong>Relative vs.&nbsp;Absolute</strong> mean? GraphPad has a post explaining this problem: <a href="https://www.graphpad.com/support/faq/relative-vs-absolute-ic50/">Relative vs.&nbsp;Absolute IC50</a> and <a href="https://www.graphpad.com/support/faqid/1356/">50% of what? How exactly are Ic50 and EC50 defined?</a></p>
<p><img src="https://tlint101.github.io/practice-in-code/posts/img/graphpad_absolute.png" class="img-fluid" alt="graphpad_absolute.png"><br>
Image from GraphPad KNOWLEDGEBASE - ARTICLE #1566 (<a href="https://www.graphpad.com/support/faq/relative-vs-absolute-ic50/">here</a>)</p>
<p>In short, <strong>Relative IC50 is the concentration that brings the curve down to the point halfway between the top and the bottom plateaus of the curve</strong>. This is the most common definition for IC50. When anyone says my drug has an IC50 of X value, it is safe to assume that they mean relative IC50. The problem is that the relative IC50 may not correlate to exactly 50% response (Figure above).</p>
<p>In contrast, <strong>Absolute IC50 is the value at the exact point where the target response is 50%</strong>. The figure above details this point with the horizontal lines. Keep in mind that depending on the dataset and results, the 50% mark can also be ambiguous. It may be best to use absolute IC50 values if the response can be properly converted to a percentage (0% - 100%). However, how this is done can differ between methods and assays.</p>
<p>In this tutorial, we will not be too concerted with these aspects. Instead, we will focus on “weird” results that may result from the Relative vs Absolute IC50 calculation. Sometimes these results are due to limited datapoints (i.e.&nbsp;more concentrations should be tested). This will be explained further below.</p>
</section>
<section id="example-start" class="level3">
<h3 class="anchored" data-anchor-id="example-start">Example start</h3>
<p>First we will look at a “good example”. By this I mean there are enough points that can give a good representation of the plateau at both ends of the response. This is necessary to determine the general curve.</p>
<p>Here a .csv file will be read as a Pandas DataFrame. The current version of py50 requires a column with the drug name, drug concentration, and response average for the calculations. As seen in the <a href="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart.html">Quickstart tutorial</a>, the “calculate_IC50” will output a table with the final calculations. By default, the IC50 value is the <strong>Relative IC50 value</strong>.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:39.699202Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:39.660606Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IC50</span></span>
<span id="cb1-2">relative_ic50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> good_example.calculate_ic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb1-3">relative_ic50</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>92.854428</td>
<td>-7.640263</td>
<td>439.823988</td>
<td>1.040875</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We can double check the calculations if we like. There are two online IC50 calculators, <a href="https://www.aatbio.com/tools/ic50-calculator">AATBioquest IC50 Calculator</a> and the <a href="http://ic50.org/index.html">Very Simple IC50 Tool Kit</a>, both of which also give a relative IC50 value of 439.82 nM.</p>
<p>What does that mean graphically? Here, a graph of the dataset will be plotted with a box to highlight the Relative IC50 value. For this we can use the “conc_target” parameter, which will take in the input concentration of interest and draw a box between the X and Y axis with the curve at the intersection. In this case, we will see where the Relative IC50 value (439.82 nM) lands on the curve. This can also be checked using the “verbose=True” argument.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:39.968166Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:39.682038Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate table into PlotCurve class</span></span>
<span id="cb2-2">absolute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(good_example_df)</span>
<span id="cb2-3">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> absolute.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb2-4">                                    response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb2-5">                                    plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Relative IC50 Value'</span>,</span>
<span id="cb2-6">                                    drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb2-7">                                    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb2-8">                                    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb2-9">                                    conc_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'µM'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the concentration in µM</span></span>
<span id="cb2-10">                                    box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-11">                                    box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb2-12">                                    conc_target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.43982</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the IC50 value must be in same units as label</span></span>
<span id="cb2-13">                                    xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To extend the tail at both ends of the curve</span></span>
<span id="cb2-14">                                    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>),</span>
<span id="cb2-15">                                    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Drug 1 concentration will be in µM!
Concentration on X-axis will be in µM
Box X intersection:  0.44 µM
Box Y intersection:  42.607 %</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Notice that the box is not at the 50% mark on the Y-Axis. Actually it is roughly 42.61% according to the output. Again, we can check this using the AATBioquest IC50 calculator, which also gives an inhibition response of 42.61% for the relative IC50 value. The calculations are consistent with each other. The final result si an IC50 value not exactly at the 50% response mark. Essentially, what is shown is the <strong>Relative IC50 value</strong>.</p>
</section>
<section id="comparison-to-absolute-ic50" class="level3">
<h3 class="anchored" data-anchor-id="comparison-to-absolute-ic50">Comparison to Absolute IC50</h3>
<p>What if we are interested to know the concentration at exactly 50% response? This number will be the <strong>Absolute IC50</strong> value. We can calculate that easily with the “calculate_absolute_ic50” function. The exact Absolute IC50 value can also be highlighted using the ‘Box=True’ parameter and removing the ‘conc_target=’ parameter. By default, the box will be drawn at 50% response.</p>
<p>Bear in mind - Absolute IC50 in this case is relative to the input dataset. Like the relative IC50 value, it can change depending on a number of factors.</p>
<p>When calculating the Absolute IC50 with py50, by default it will output both the Relative and Absolute IC50 values.</p>
<p>The Absolute IC50 for this dataset can be calculated and plotted as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:39.993533Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:39.983965Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate Absolute IC50</span></span>
<span id="cb4-2">absolute_ic50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> good_example.calculate_absolute_ic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb4-3">absolute_ic50</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">relative ic50 (nM)</th>
<th data-quarto-table-cell-role="th">absolute ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>92.854428</td>
<td>-7.640263</td>
<td>439.823988</td>
<td>584.734114</td>
<td>1.040875</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.177099Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:39.991638Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot Figure</span></span>
<span id="cb5-2">absolute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(good_example_df)</span>
<span id="cb5-3">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> absolute.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb5-4">                                    response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb5-5">                                    plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute IC50 Value'</span>,</span>
<span id="cb5-6">                                    drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb5-7">                                    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb5-8">                                    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb5-9">                                    box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-10">                                    box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb5-11">                                    conc_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'µM'</span>,</span>
<span id="cb5-12">                                    box_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb5-13">                                    xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb5-14">                                    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>),</span>
<span id="cb5-15">                                    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Drug 1 concentration will be in µM!
Concentration on X-axis will be in µM
Box X intersection:  0.585 µM
Box Y intersection:  50 %</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The concentration for the Absolute IC50 will be 585.47 nM for this dataset. Again, it can be double checked using the AATBioquest IC50 calculator. When comparing the results on the AATBioquest calculator, the concentration at 50% response on the Y-axis also outputs an X-axis value of 584.72, similar to our calculated Absolute IC50 table.</p>
</section>
<section id="why-go-through-all-of-this" class="level3">
<h3 class="anchored" data-anchor-id="why-go-through-all-of-this">Why go through all of this?</h3>
<p>There are a lot of factors that can influence the IC50 calculation. It can also be impacted by the experimental design. The minimum number of concentrations needed to calculate IC50 is two, however there are varying methods that can result in varying numbers. py50, for example, requires at least 4 datapoints to calculate the IC50. And it is always advisable to test at more concentrations than 2 (I personally would be more suspicious if there was only 2 points!). Typically, the more concentrations tested the better and more accurate the calculated IC50 will be.</p>
<p>Here is another example. In this case, the dummy drug was only tested at five different concentrations.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.183291Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.176737Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">confusing_example_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/absolute_example.csv'</span>)</span>
<span id="cb7-2">confusing_example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Calculator(confusing_example_df)</span>
<span id="cb7-3">confusing_example.show()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound Name</th>
<th data-quarto-table-cell-role="th">Compound Conc</th>
<th data-quarto-table-cell-role="th">% Inhibition 1</th>
<th data-quarto-table-cell-role="th">% Inhibition 2</th>
<th data-quarto-table-cell-role="th">% Inhibition Avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Say Wha?</td>
<td>10000</td>
<td>70</td>
<td>71</td>
<td>70</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Say Wha?</td>
<td>3000</td>
<td>61</td>
<td>59</td>
<td>60</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Say Wha?</td>
<td>1000</td>
<td>42</td>
<td>44</td>
<td>43</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Say Wha?</td>
<td>300</td>
<td>25</td>
<td>24</td>
<td>24</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Say Wha?</td>
<td>100</td>
<td>9</td>
<td>10</td>
<td>10</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.228121Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.182606Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">confusing_absolute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusing_example.calculate_absolute_ic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>) </span>
<span id="cb8-2">confusing_absolute</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">relative ic50 (nM)</th>
<th data-quarto-table-cell-role="th">absolute ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Say Wha?</td>
<td>78.113654</td>
<td>-3.368611</td>
<td>694.869229</td>
<td>1498.098675</td>
<td>0.834368</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Notice that with this example, <strong>the Relative IC50 and the Absolute IC50 values vary greatly</strong>, with the Relative being in the nM and Absolute being in the µM range. A huge difference! Again, similar calculations are seen when using the AATBioquest IC50 calculator. When plotting the results, disheartening results are also shown.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.400358Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.223316Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(confusing_example_df)</span>
<span id="cb9-2">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb9-3">                                response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb9-4">                                plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusing Drug'</span>,</span>
<span id="cb9-5">                                drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Say Wha?'</span>,</span>
<span id="cb9-6">                                xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb9-7">                                ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb9-8">                                legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb9-9">                                conc_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'µM'</span>,</span>
<span id="cb9-10">                                xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>),</span>
<span id="cb9-11">                                line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>,</span>
<span id="cb9-12">                                box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb9-13">                                box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb9-14">                                conc_target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.69487</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Relative IC50 results</span></span>
<span id="cb9-15">                                figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>),</span>
<span id="cb9-16">                                verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Say Wha? concentration will be in µM!
Concentration on X-axis will be in µM
Box X intersection:  0.695 µM
Box Y intersection:  37.372 %</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>More specifically, the <strong>Relative IC50</strong> for the Say Wha? is closer to 37.3%. As personal preference, I do not think this is indicative of the meaning for “IC50”. It is further from the 50% than the first example above! When the plot is adjusted for the <strong>Absolute IC50</strong> below, we see a more reasonable graph representation. More specifically, the <strong>Absolute IC50</strong> would make more sense in relation to the data as the concentration for 50% inhibition response would be located somewhere between 3000 and 1000 nM (See Table above).</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.579997Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.403256Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb11-2">                                response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb11-3">                                plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusing Drug'</span>,</span>
<span id="cb11-4">                                drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Say Wha?'</span>,</span>
<span id="cb11-5">                                xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb11-6">                                ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb11-7">                                legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-8">                                conc_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'µM'</span>,</span>
<span id="cb11-9">                                xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>),</span>
<span id="cb11-10">                                line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>,</span>
<span id="cb11-11">                                box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-12">                                box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb11-13">                                x_concentration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.49940</span>,</span>
<span id="cb11-14">                                figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>),</span>
<span id="cb11-15">                                verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Say Wha? concentration will be in µM!
Concentration on X-axis will be in µM
Box X intersection:  1.498 µM
Box Y intersection:  50 %</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>In this case, the Absolute IC50 more precisely puts the 50 in IC50. Keep in mind that this only works with the data on hand and for this case, it appears to be a more accurate representation of the dataset.</p>
</section>
<section id="how-to-get-more-precise" class="level3">
<h3 class="anchored" data-anchor-id="how-to-get-more-precise">How to get more precise?</h3>
<p>One way to get more precise IC50 calculations is to increase the number of concentrations tested for a given drug. More points, especially at the end of the plateau, would help give a better indication of the drug potency. Here we will add 2 additional concentration points to our test and calculate the <strong>Relative</strong> and <strong>Absolute IC50 Values</strong></p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.585829Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.582617Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">new_conc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Say Wha?'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>},</span>
<span id="cb13-2">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Say Wha?'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>}]</span>
<span id="cb13-3"></span>
<span id="cb13-4">confusing_example_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([confusing_example_df, pd.DataFrame(new_conc)], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-5">confusing_example_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound Name</th>
<th data-quarto-table-cell-role="th">Compound Conc</th>
<th data-quarto-table-cell-role="th">% Inhibition 1</th>
<th data-quarto-table-cell-role="th">% Inhibition 2</th>
<th data-quarto-table-cell-role="th">% Inhibition Avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Say Wha?</td>
<td>10000</td>
<td>70.0</td>
<td>71.0</td>
<td>70</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Say Wha?</td>
<td>3000</td>
<td>61.0</td>
<td>59.0</td>
<td>60</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Say Wha?</td>
<td>1000</td>
<td>42.0</td>
<td>44.0</td>
<td>43</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Say Wha?</td>
<td>300</td>
<td>25.0</td>
<td>24.0</td>
<td>24</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Say Wha?</td>
<td>100</td>
<td>9.0</td>
<td>10.0</td>
<td>10</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Say Wha?</td>
<td>10</td>
<td>NaN</td>
<td>NaN</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Say Wha?</td>
<td>100000</td>
<td>NaN</td>
<td>NaN</td>
<td>90</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.646378Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.642099Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Calculator(confusing_example_df)</span>
<span id="cb14-2">example_ic50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example.calculate_absolute_ic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb14-3">example_ic50</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">relative ic50 (nM)</th>
<th data-quarto-table-cell-role="th">absolute ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Say Wha?</td>
<td>92.497681</td>
<td>3.325575</td>
<td>1563.735262</td>
<td>1779.972212</td>
<td>0.723894</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>From the new table, you can see that adding more points will adjust both the <strong>Relative</strong> and <strong>Absolute IC50</strong> values. Both values will begin to move closer to each other. Again, this appears to be reasonable due to the Inhibition average of the dataset, where 50% inhibition should fall somewhere between the 1000 and 3000 nM concentration. This will also change the way the graph looks as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-15T04:38:40.873702Z&quot;,&quot;start_time&quot;:&quot;2024-01-15T04:38:40.649040Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">example_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(confusing_example_df)</span>
<span id="cb15-2">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example_plot.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb15-3">                                        response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb15-4">                                        plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusing Drug with More Data Points'</span>,</span>
<span id="cb15-5">                                        drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Say Wha?'</span>,</span>
<span id="cb15-6">                                        xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb15-7">                                        ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb15-8">                                        legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb15-9">                                        conc_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'µM'</span>,</span>
<span id="cb15-10">                                        xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb15-11">                                        line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>,</span>
<span id="cb15-12">                                        box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb15-13">                                        x_concentration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.563735262</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Highlight Relative IC50 </span></span>
<span id="cb15-14">                                        box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb15-15">                                        figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>),</span>
<span id="cb15-16">                                        verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Say Wha? concentration will be in µM!
Concentration on X-axis will be in µM
Box X intersection:  1.78 µM
Box Y intersection:  50 %</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Using the AATBioquest IC50 calculator, if you are feeling adventurous, can be used ot double check the above results. Both the <strong>Relative</strong> (1563.74 nM) and <strong>Absolute IC50</strong> (1782.84 nM) values are closer to the 50% response, with the Relative IC50 increasing to 47.89% response for this example. These results are also reasonable due to the dataset on hand. It may be subjected, but the curve can be smother, and additional testing would be needed to achieve this. Consulting an appropriate protocol would be advisable.</p>
</section>
</section>
<section id="takeaway" class="level1">
<h1>Takeaway</h1>
<p>IC50 values can be confusing. Here I try to explain a bit about Relative and Absolute IC50. I think Absolute IC50, especially in the examples here and in py50, may be a misnomer. It is not the “absolute” result for a drug. The results will always vary depending on a number of factors. Nevertheless, I use it in this case because it is absolute to the data on hand.</p>
<p>In general, the more concentration points to obtain the plateau for 0% and 100% responses, the better. The best thing to do is to remember to take stock of your final dataset. Know where the 50% response should lay within your dataset and you can doublecheck the results by eyeballing the calculated (Relative or Absolute) IC50 value. But always remember - the calculated value is representative of the dataset <strong>on hand</strong> and may not represent the definite (Absolute) result.</p>
<p>🍾<strong>Remember: Use your best judgement.</strong>🎉</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>py50</category>
  <category>Coding</category>
  <category>Informatics</category>
  <category>Plotting</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/8-absolute-ic50.html</guid>
  <pubDate>Mon, 15 Jan 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>py50 - Showing off Color Features</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features.html</link>
  <description><![CDATA[ 



<p>Last post I gave a quick rundown of py50. Here I would like to explain additional features, mainly color and highlighting options.</p>
<p>When it comes to figures, I think they are one of the more difficult aspects of writing a paper. A good figure must be many things. It must not only convey to the audience what was done, but also the outcome and our own interpretation said results. The figures are also a chance to add a bit of pizazz to the manuscript or presentation. There is nothing wrong with the classic black and white figures, but they can come across as stilted and boring, especially now in 2024 were many manuscripts are downloaded and read as PDFs. Adding additional flourishes to highlight our points with a dash of color will allow our personality, and by extension the research we are trying to convey, to shine.</p>
<p>py50 offers some of these functions that will, hopefully, allow the figures and results to pop. While py50 offers three different plotting styles, the colors and highlighting options stay the same across the functions. I will show a few examples across all three plot styles.</p>
<p>For those who want to get their hands dirty immediately, the functions are explained in more detail at the <a href="https://py50.readthedocs.io/en/latest/plotcurve.html#plotcurve.PlotCurve.single_curve_plot">documentation page</a></p>
<section id="example-with-single-plot" class="level2">
<h2 class="anchored" data-anchor-id="example-with-single-plot">Example with Single Plot</h2>
<p>In addition to the typical configurations for a plot shown here - Plot Title and axis labels - the curve color can be adjusted. This takes the standard name of the color names (red, green, blue, etc) or hex codes. Further, users can highlight IC50 values on the curve using the ‘box=True’ argument. By default, the box will be gray. Again, the box color can be adjusted using the color names or hex codes. Importantly, the box does not need to correspond with the IC50. If you wanted to highlight a different area, say IC60, the box can be adjusted accordingly using the ‘box_intercept’ argument.</p>
<p>All information associated with the plots can be generated using the verbose=True argument. This will print out information related to the plot, consisting of what drug concentration py50 assumes the data is in, what concentration the X-axis will be in (default is in nM), and the concentration and response for the box.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-11T02:44:21.460465Z&quot;,&quot;start_time&quot;:&quot;2024-01-11T02:44:21.168084Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/single_example.csv'</span>)</span>
<span id="cb1-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(df)</span>
<span id="cb1-3"></span>
<span id="cb1-4">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.single_curve_plot(drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb1-5">                                concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb1-6">                                response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb1-7">                                plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified Single Curve'</span>,</span>
<span id="cb1-8">                                xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concentration in nM'</span>,</span>
<span id="cb1-9">                                ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Response %'</span>,</span>
<span id="cb1-10">                                line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'teal'</span>,</span>
<span id="cb1-11">                                box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-12">                                box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#E0115F'</span>,</span>
<span id="cb1-13">                                box_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb1-14">                                verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Drug 1 concentration will be in nM!
Concentration on X-axis will be in nM
Box X intersection:  880.204 nM
Box Y intersection:  60 %</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features_files/figure-html/cell-2-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>For those who do not like the box but still want to highlight a particular value on the curve, there are ‘vline’ or ‘hline’ arguments. This will draw a dash line across the length of the plot. It is valid for both vertical and horizontal directions.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-11T02:44:21.645438Z&quot;,&quot;start_time&quot;:&quot;2024-01-11T02:44:21.479110Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.single_curve_plot(drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb3-2">                                concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb3-3">                                response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb3-4">                                plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified Single Curve in Hulk Colors'</span>,</span>
<span id="cb3-5">                                xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concentration in nM'</span>,</span>
<span id="cb3-6">                                ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Response %'</span>,</span>
<span id="cb3-7">                                line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>,</span>
<span id="cb3-8">                                hline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb3-9">                                hline_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purple'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="example-with-multiple-curves" class="level2">
<h2 class="anchored" data-anchor-id="example-with-multiple-curves">Example with Multiple Curves</h2>
<p>Depending on the situation, it may be more prudent to show multiple curves in a single plot. That can be done using the multi_curve_plot() function. Again, the options shown here are available in all three plots. By default, the multi_curve_plot() uses a colorblind color and marker palette, but custom colors and markers can be passed as a list.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-11T02:44:21.923493Z&quot;,&quot;start_time&quot;:&quot;2024-01-11T02:44:21.643766Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/multiple_example.csv'</span>)</span>
<span id="cb4-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(df)</span>
<span id="cb4-3"></span>
<span id="cb4-4">rainbow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#ff0000'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#ffa500'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008000'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#ee82ee'</span>]</span>
<span id="cb4-5"></span>
<span id="cb4-6">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.multi_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb4-7">                               concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb4-8">                               response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb4-9">                               plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multi-Curves in Rainbow'</span>,</span>
<span id="cb4-10">                               xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concentration (nM)'</span>,</span>
<span id="cb4-11">                               ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Response'</span>,</span>
<span id="cb4-12">                               legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-13">                               line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rainbow)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Notice that some points above are below the 0% response. Depending on your dataset, these may be outliers. These can be shown by adjusting the Y axis using either the ymax or ymin arguments.</p>
<p>With multiple lines in the plot, it may be more prudent to highlight the response. The box can be drawn, but can only be drawn for a specific drug. In this case, the vline or hline arguments would serve better. Here a specific concentration is highlighted instead. The units for the vline must correspond to the plot units. In this case, the vline will be in nanomolar (nM) concentration. Colors can also be specified using the vline_color or hline_color, repsectively.</p>
<p>This example uses the vline at 880.2 nM, which roughly translates to the IC50 value for Drug 3.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-11T02:44:22.204861Z&quot;,&quot;start_time&quot;:&quot;2024-01-11T02:44:21.933694Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.multi_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb5-2">                               concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb5-3">                               response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb5-4">                               plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multi-Curves in Rainbow'</span>,</span>
<span id="cb5-5">                               xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concentration (nM)'</span>,</span>
<span id="cb5-6">                               ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Response'</span>,</span>
<span id="cb5-7">                               legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-8">                               line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rainbow,</span>
<span id="cb5-9">                               ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb5-10">                               vline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">880.2</span>,</span>
<span id="cb5-11">                               vline_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="example-with-grid-plots" class="level2">
<h2 class="anchored" data-anchor-id="example-with-grid-plots">Example with Grid Plots</h2>
<p>Finally, multiple curves can be plotted and arrayed in a grid. Importantly, the grid_curve_plot() function contains an additional argument - column_num. This argument will format the curves accordingly. <strong>Note</strong> the number of curves must be even if you want to array the curves in a grid format. For now, the example will utilize four graphs.</p>
<p>By default, the grid curves are arrayed in a color-blind palette. They can be changed by inputting a color in a list format.</p>
<p>We can reposition how the plots are laid out using the “column_num=” argument. Note that if this argument is called, the figures will be “distroted”. The subplots can be adjusted by including the “figsize=” argument and adjusting the size accordingly.</p>
<p>By default, the grid_curve_plot() was figure size is adjusted for two cures. As a result, the figsize is adjusted manually in these examples.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-11T02:44:22.952921Z&quot;,&quot;start_time&quot;:&quot;2024-01-11T02:44:22.226019Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.grid_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb6-2">                              concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb6-3">                              response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb6-4">                              plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 Row Example'</span>,</span>
<span id="cb6-5">                              column_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb6-6">                              figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, A specific point on the curve can be highlighted using the box or the hline/vline arguments. The box will be plotted for each curve. The figures can be further modified to add a title, adjust the line colors similarly to the examples seen above.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-11T02:44:23.708586Z&quot;,&quot;start_time&quot;:&quot;2024-01-11T02:44:22.966001Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.grid_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb7-2">                              concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb7-3">                              response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb7-4">                              plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grid Example'</span>,</span>
<span id="cb7-5">                              line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rainbow,</span>
<span id="cb7-6">                              box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-7">                              box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#E0115F'</span>,</span>
<span id="cb7-8">                              figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>These are some of the features with the plots generated from py50.</p>
<p>This is a great project for me personally and I learned a lot of making py50. I plan to maintain py50 for the foreseeable future. There are a couple of feature ideas swimming in my head that I would love to include in future releases.</p>
<p>Finally, for anyone who is not as well versed in code, there is a web application version of py50 (<a href="https://py50-app.streamlit.app">click here</a>). The updates for the program takes a little more time, as I tend to tinker a bit more with UI stuff. But overall, it works fairly well and will get you the calculations and plots needed.</p>
<p>If you find any issues with py50, feel free to leave a comment on the GitHub repository.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>py50</category>
  <category>Coding</category>
  <category>Informatics</category>
  <category>Plotting</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/7-py50-additional-features.html</guid>
  <pubDate>Wed, 10 Jan 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>py50 - Now with Updates!</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart.html</link>
  <description><![CDATA[ 



<section id="py50-introduction" class="level2">
<h2 class="anchored" data-anchor-id="py50-introduction">py50 Introduction</h2>
<p>It is a new year. That means we can start fresh. No need to look at the past entries when I was starting the blog 🫣.</p>
<p>I have tested py50 and fixed the bugs previously found, while also adding some, hopefully, quality of life enhancements. Teh quality of life enhancements are mostly for me, as I have refactored a lot of the code to make future maintenance easier. I can reduce the code further, but for now, I like what I have. For the user, the quality of life enhancements are more prevalent with the py50 Streamlit Web Application (<a href="https://py50-app.streamlit.app">link here</a>) and include things like grammar, UI consistency, and information to inform the user of what units the data is in or the type of calculations made. These updates, while important for user experience, are more involved and should be rolling out at the end of the month.</p>
<p>In contrast, the py50 python module is good to go and I am ready to introduce them. This post is adapted from the <a href="https://github.com/tlint101/py50/blob/main/tutorials/001_quickstart.ipynb">Quickstart Tutorial</a>, only with a little more of my personal flair - A lot more fun for me to write, but (hopefully) not annoying for readers.</p>
<p>Here I will introduce (as of this writing) py50 v0.3.2.</p>
</section>
<section id="how-does-py50-work" class="level2">
<h2 class="anchored" data-anchor-id="how-does-py50-work">How does py50 work?</h2>
<p>There are software available to calculate IC50. GraphPad is a popular choice. There is also an online <a href="https://www.aatbio.com/tools/ic50-calculator">IC50 Calculator</a> by AAT Bioquest. These can be great choices, but not particularly ones that fit users who want to automate everything through code.</p>
<p>That is where py50 comes in. py50 can work directly with a pandas DataFrame. This makes it easy to quickly modify the data into a favorable format by the user before graphing. Currently, there are three submodules associated with py50. Here we will import all of them.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:36.281249Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.277622Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> py50.calculator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Calculator</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> py50.plotcurve <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotCurve</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> py50.plot_settings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CBMARKERS, CBPALETTE</span></code></pre></div>
</div>
</section>
<section id="calculate-relative-and-absolute-ic50" class="level2">
<h2 class="anchored" data-anchor-id="calculate-relative-and-absolute-ic50">Calculate Relative and Absolute IC50</h2>
<p>First we will calculate Relative and Absolute IC50. A future post will dive deeper into the differences between the two. For now, we are concerned with calculating them. py50 uses the Four Paramater Logistic (4PL) Regression algorithm to calculate the IC50: <img src="https://latex.codecogs.com/png.latex?Y%20=%20%5Ctext%7BMin%7D%20+%20%5Cfrac%7B%5Ctext%7BMax%7D%20-%20%5Ctext%7BMin%7D%7D%7B1%20+%20%5Cleft(%5Cfrac%7BX%7D%7B%5Ctext%7BIC50%7D%7D%5Cright)%5E%7B%5Ctext%7BHill%20coefficient%7D%7D%7D"> where min is the minimum response value, max is the maximum response value, Y is the response values of the curves, and X is the concentration.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:36.290375Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.281837Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in dataset</span></span>
<span id="cb2-2">example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/single_example.csv'</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">calc_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Calculator(example) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate dataframe into the Calculator class </span></span>
<span id="cb2-5">calc_data.show().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound Name</th>
<th data-quarto-table-cell-role="th">Compound Conc</th>
<th data-quarto-table-cell-role="th">% Inhibition 1</th>
<th data-quarto-table-cell-role="th">% Inhibition 2</th>
<th data-quarto-table-cell-role="th">% Inhibition Avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>100000.0</td>
<td>90</td>
<td>94</td>
<td>92</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 1</td>
<td>33300.0</td>
<td>97</td>
<td>89</td>
<td>93</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 1</td>
<td>11100.0</td>
<td>86</td>
<td>89</td>
<td>88</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 1</td>
<td>3700.0</td>
<td>81</td>
<td>88</td>
<td>84</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Drug 1</td>
<td>1240.0</td>
<td>63</td>
<td>70</td>
<td>67</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Once we have the data loaded, the calculations can be performed. If only relative IC50 is needed, users cna call the calc_data.calculate_ic50() function instead. Both functions work the same and need three columns to function properly - name of the column, concentration column, and the response column.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:36.331683Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.291306Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">calculation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_data.calculate_absolute_ic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb3-2">calculation</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">relative ic50 (nM)</th>
<th data-quarto-table-cell-role="th">absolute ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>92.854428</td>
<td>-7.640263</td>
<td>439.823988</td>
<td>584.734114</td>
<td>1.040875</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>If IC50 is not your cup of tea, you can quickly scale the values into pIC50 values. This is done using the calculate_pic50() function. This will calculate absolute IC50, but will append two additional columns for the relative pIC50 and absolute pIC50, respectively.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:36.339065Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.333696Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">calculation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_data.calculate_pic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb4-2">calculation</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">relative ic50 (nM)</th>
<th data-quarto-table-cell-role="th">absolute ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
<th data-quarto-table-cell-role="th">relative pIC50</th>
<th data-quarto-table-cell-role="th">absolute pIC50</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>92.854428</td>
<td>-7.640263</td>
<td>439.823988</td>
<td>584.734114</td>
<td>1.040875</td>
<td>6.356721</td>
<td>6.233042</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="single-curve" class="level2">
<h2 class="anchored" data-anchor-id="single-curve">Single Curve</h2>
<p>Okay, so the calculations are all well and good, but what if I want to have my data represented a graph? Godo news! py50 is able to handle this with ease. There are three different types of plots that can be generated. Here we will start with the classic single dose-response curve.</p>
<p>This can be done by using hte single_curve_plot() function. As for the parameters, I personally prefer lots of options. I like to be able to tweak my images to my liking. It is my goal to give these same options to other users. All three types of plots have a lot of arguments, which while daunting, I think can generate a figure that really fits the user’s personality and use case. These can be found in the documentation page <a href="https://py50.readthedocs.io/en/latest/plotcurve.html#plotcurve.PlotCurve">here</a>.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:36.611187Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.339368Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">single <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/single_example.csv'</span>)</span>
<span id="cb5-2">plot_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(single)</span>
<span id="cb5-3"></span>
<span id="cb5-4">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb5-5">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb5-6">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Default Plot Single Example (Positive)'</span>,</span>
<span id="cb5-7">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb5-8">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb5-9">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb5-10">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-11">                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sometimes the legend needs to be manually adjusted and can be with the legend_loc argument</span></span>
<span id="cb5-12">                                     legend_loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower right'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The graphing works great for both positive and negative curves (The older versions of py50 had issues handling this. I forgot the <a href="https://giphy.com/gifs/season-9-the-simpsons-9x20-xT5LMBhZ4hSUIpf3qg">carry the one</a>. Oops!).</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:36.824953Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.610261Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">single_negative <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/single_example_negative.csv'</span>)</span>
<span id="cb6-2">plot_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(single_negative)</span>
<span id="cb6-3">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb6-4">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb6-5">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Default Plot Single Example (Negative Slope)'</span>,</span>
<span id="cb6-6">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb6-7">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb6-8">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb6-9">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="multi-curve" class="level2">
<h2 class="anchored" data-anchor-id="multi-curve">Multi-Curve</h2>
<p>Those graphs look good! But what if you are working with more than one drug? True, we can loop over each drug and generate single curve plots for each one. But there are times that combining the curves onto a single plot would be more descriptive of our data or story. The other two options allow just that! First we will go through the multi-curve plot.</p>
<p>The multi_curve_plot() function works in much the same way as the single_curve_plot() above. The main difference is that multi_curve_plot will inherently scan the name_col for unique names and generate the plot accordingly. By default, the CBPALETTE and CBMARKERS, can handle up to eight items. I do not think that should be an issue since, with the four curves in the example, it looks busy already. But more is an option if needed.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:37.098217Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:36.824754Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in Dataset</span></span>
<span id="cb7-2">multi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/multiple_example.csv'</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate dataframe into the PlotCurve class </span></span>
<span id="cb7-5">plot_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(multi)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional to inspect table</span></span>
<span id="cb7-8">plot_data.show()</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate figure</span></span>
<span id="cb7-11">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.multi_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb7-12">                                    concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb7-13">                                    response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb7-14">                                    plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multi-Curve Plot'</span>,</span>
<span id="cb7-15">                                    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb7-16">                                    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb7-17">                                    legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-18">                                    line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CBPALETTE,</span>
<span id="cb7-19">                                    marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CBMARKERS,</span>
<span id="cb7-20">                                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To adjust Y-Axis, can use ymax or ymin arguments</span></span>
<span id="cb7-21">                                    ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Again, the functions will work for both positive and negative curves!</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:37.504824Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:37.097475Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For negative slope</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in Dataset</span></span>
<span id="cb8-3">multi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/multiple_example_negative.csv'</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate dataframe into the PlotCurve class </span></span>
<span id="cb8-6">plot_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(multi)</span>
<span id="cb8-7"></span>
<span id="cb8-8">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.multi_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb8-9">                                    concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb8-10">                                    response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb8-11">                                    plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multi-Curve Plot (Negative Slope)'</span>,</span>
<span id="cb8-12">                                    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb8-13">                                    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb8-14">                                    legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-15">                                    line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CBPALETTE,</span>
<span id="cb8-16">                                    marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CBMARKERS,</span>
<span id="cb8-17">                                    ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="grid-plot" class="level2">
<h2 class="anchored" data-anchor-id="grid-plot">Grid Plot</h2>
<p>Finally, there is the grid_plot() function. This works very much the same as the multi_curve_plot() above, except each curve will be drawn as a single plot arrayed in a grid. This is good if you already have a particular layout, but want to draw multiple curves. The function works very similarly to the other two functions above.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2024-01-06T05:11:38.353739Z&quot;,&quot;start_time&quot;:&quot;2024-01-06T05:11:37.505859Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in Dataset</span></span>
<span id="cb9-2">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/multiple_example_negative.csv'</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate dataframe into the PlotCurve class </span></span>
<span id="cb9-5">grid_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(grid)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional to inspect table</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grid_plot.show()</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_plot.grid_curve_plot(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>,</span>
<span id="cb9-11">                                   concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb9-12">                                   response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb9-13">                                   plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multi-Curve Plot'</span>,</span>
<span id="cb9-14">                                   xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>),</span>
<span id="cb9-15">                                   ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb9-16">                                   conc_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nM'</span>,</span>
<span id="cb9-17">                                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjusting the figsize() may be needed for columns bigger than 1 by 2</span></span>
<span id="cb9-18">                                   figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That is it!</p>
<p>This is my first very big (in my eyes) python project and I learned a lot. Hopefully the pacakge can help others too.</p>
<p>And for anyone reading this who are not code savvy, I have converted py50 into a web application using streamlit. It can be found <a href="https://py50-app.streamlit.app">here</a>. The update may be a little bit slower, as managing UI takes a bit more time, but hopefully this makes py50 more accessible to people.</p>
<p>Thanks for reading. 🙌</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>py50</category>
  <category>Coding</category>
  <category>Informatics</category>
  <category>Plotting</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/6-py50-QuickStart.html</guid>
  <pubDate>Mon, 08 Jan 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Egg On My Face</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/5-egg-on-my-face.html</link>
  <description><![CDATA[ 



<p>Well I have egg on my face. Rotten eggs, so that they are unsalvageable to be used in scrambled eggs.</p>
<p>Here is the story. In my <a href="https://tlint101.github.io/practice-in-code/posts/3-announcing-py50.html">earlier post</a> I announced and in the <a href="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot.html">last post</a> I gave an example on how to use the program in python. Everything worked! The thing is, it worked <strong>for my</strong> datasets. When I shared this code/program with my co-workers/labmates, my program quickly crumbled like a dusty cracker. It is a good thing that I placed it as version 0.1.0. I am currently in the process of fixing the bugs and I hope to finish it sometime in the new year (Hey, a New Year’s resolution I might actually finish for once!).</p>
<p>I will be sure to give updates and tutorials on the program once I finish.</p>
<p>If you would like to use the program now, I push out updates faster to the Streamlit version of py50 (<a href="https://py50-app.streamlit.app">see here</a>). This web application is for my co-workers/labmates, but I hope others are able to find it and find it useful too.</p>
<p>In the meantime, I’ll be working on fixing these bugs and refactoring the code so that it will be a little bit easier to fix in the future (you’re welcome future me).</p>
<p>Thanks!</p>



 ]]></description>
  <category>Updates</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/5-egg-on-my-face.html</guid>
  <pubDate>Tue, 19 Dec 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>py50: Single Curve Plot</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot.html</link>
  <description><![CDATA[ 



<section id="generate-single-dose-response-curve" class="level1">
<h1>Generate Single Dose-Response Curve</h1>
<p>The following will demo how to calculate the IC50 for a given drug response and generate single dose-response curve.</p>
<p>This tutorial will use dummy data found under the ‘../dataset’ folder. The calculation requires inputs from a DataFrame. As shown, only specific information is needed to run the calculations. Finally, the information will be plotted on a sigmoidal curve.</p>
<p>For those interested, this notebook can be found <a href="https://github.com/tlint101/practice-in-code/blob/main/notebooks/4-py50-single-plot.ipynb">here</a></p>
<p>And if you are not well versed in python code, good news! I have converted this python app into a web application. You can access it <a href="https://py50-app.streamlit.app">here</a></p>
<p><strong>Note - December 11 Edit:</strong> I shared my package with my classmates and coworkers. All seemed well until someone tried to make a fancy negative sigmoidal curve (from 100% to 0%). I tested my code on my own dataset which has a positive sigmoidal curve (from 0% to 100%). As such, I had to spend time fixing things. It has come out and the next post will address these issues.</p>
<section id="example-start" class="level3">
<h3 class="anchored" data-anchor-id="example-start">Example start</h3>
<p>First import the modules and the dataset.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:18.499956Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.000402Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> py50.calculate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Calculate</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> py50.plotcurve <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotCurve</span></code></pre></div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:18.509637Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.501209Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/py50/single_example.csv'</span>)</span>
<span id="cb2-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound Name</th>
<th data-quarto-table-cell-role="th">Compound Conc</th>
<th data-quarto-table-cell-role="th">% Inhibition 1</th>
<th data-quarto-table-cell-role="th">% Inhibition 2</th>
<th data-quarto-table-cell-role="th">% Inhibition Avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>100000.0</td>
<td>90</td>
<td>94</td>
<td>92</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 1</td>
<td>33300.0</td>
<td>97</td>
<td>89</td>
<td>93</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 1</td>
<td>11100.0</td>
<td>86</td>
<td>89</td>
<td>88</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 1</td>
<td>3700.0</td>
<td>81</td>
<td>88</td>
<td>84</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Drug 1</td>
<td>1240.0</td>
<td>63</td>
<td>70</td>
<td>67</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="calculate-ic50" class="level3">
<h3 class="anchored" data-anchor-id="calculate-ic50">Calculate IC50</h3>
<p>The example dataframe will need to be converted into an instance of the Calculate class. Once converted, the table can also be printed for viewing and checking.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:18.512918Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.510667Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Calculate(df)</span>
<span id="cb3-2">data.show().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound Name</th>
<th data-quarto-table-cell-role="th">Compound Conc</th>
<th data-quarto-table-cell-role="th">% Inhibition 1</th>
<th data-quarto-table-cell-role="th">% Inhibition 2</th>
<th data-quarto-table-cell-role="th">% Inhibition Avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>100000.0</td>
<td>90</td>
<td>94</td>
<td>92</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 1</td>
<td>33300.0</td>
<td>97</td>
<td>89</td>
<td>93</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 1</td>
<td>11100.0</td>
<td>86</td>
<td>89</td>
<td>88</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 1</td>
<td>3700.0</td>
<td>81</td>
<td>88</td>
<td>84</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Drug 1</td>
<td>1240.0</td>
<td>63</td>
<td>70</td>
<td>67</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Currently, the py50 program requires the at least 3 columns as input. The rest of the columns will be ignored. py50 requires a column containing the following: - Drug Name - Concentration - Average Response</p>
<p>Note that py50 requires the average response. Though if you would like to calculate IC50 for one trial of a drug, that is possible.</p>
<p>The names for the corresponding columns can be passed in the “calculate_ic50()” function as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:18.567218Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.530900Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">ic50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.calculate_ic50(name_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Name'</span>, concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>, response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>)</span>
<span id="cb4-2">ic50</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">compound_name</th>
<th data-quarto-table-cell-role="th">maximum</th>
<th data-quarto-table-cell-role="th">minimum</th>
<th data-quarto-table-cell-role="th">ic50 (nM)</th>
<th data-quarto-table-cell-role="th">hill_slope</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>92.854428</td>
<td>-7.640263</td>
<td>439.823988</td>
<td>1.040875</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Where the maximum and minimum corresponds to the maximum and minimum response. The Hill slope is the hill coefficient. This table can be output as a separate .csv file. For this tutorial, we will output the final table as a markdown table.</p>
<p><strong>NOTE</strong>: The calculation in this table is the Relative IC50 value. A future post will tackle Relative vs Absolute IC50.</p>
</section>
<section id="plotting" class="level3">
<h3 class="anchored" data-anchor-id="plotting">Plotting</h3>
<p>py50 contains functions that will allow plotting. Let’s generate a sigmoidal curve from the dataset. This time the dataframe will need to be instantiated into the PlotCurve class. From there, the dataset will be calculated and the resulting information will be ploted on a graph.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:18.569770Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.538321Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">plot_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotCurve(df)</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The input dataset can be inspected as follows:</span></span>
<span id="cb5-3">data.show().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Compound Name</th>
<th data-quarto-table-cell-role="th">Compound Conc</th>
<th data-quarto-table-cell-role="th">% Inhibition 1</th>
<th data-quarto-table-cell-role="th">% Inhibition 2</th>
<th data-quarto-table-cell-role="th">% Inhibition Avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Drug 1</td>
<td>100000.0</td>
<td>90</td>
<td>94</td>
<td>92</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Drug 1</td>
<td>33300.0</td>
<td>97</td>
<td>89</td>
<td>93</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Drug 1</td>
<td>11100.0</td>
<td>86</td>
<td>89</td>
<td>88</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Drug 1</td>
<td>3700.0</td>
<td>81</td>
<td>88</td>
<td>84</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Drug 1</td>
<td>1240.0</td>
<td>63</td>
<td>70</td>
<td>67</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>For this example, plotting the dose-response curve uses the single_curve_plot() function. By default, py50 will assume drug concentrations are in nanomolar (nM) concentration and will convert them into micromolar (µM) concentrations. This will also mean that the final scale on the x-axis will be in µM. As the dosages for a typical test vary greatly in concentrations, the scale of the concentration will be in log format by default. However, depending on user needs, these can be changed.</p>
<p>Additional parameters and their explanation can be found <a href="https://github.com/tlint101/py50">here</a>.</p>
<p>First. Here we will call the “single_curve_plot” method with the associated parameters:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:18.800718Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.541159Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb6-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb6-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Default Plot'</span>,</span>
<span id="cb6-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb6-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb6-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb6-7">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-8">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis converted to µM</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="customize-figure" class="level3">
<h3 class="anchored" data-anchor-id="customize-figure">Customize figure</h3>
<p>The above figure looks great! But what if I do not like black for the line color? I would much prefer Teal (#008080). Good news! There are several ways to adjust the graph to highlight the information you want to convey. For colors, we will start with the “line_color=” parameter. The line color can be a specific color name (i.e.&nbsp;red, blue, green, etc) or a hex code. Here is an example of a colored line in “teal” (#008080)</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.017252Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:18.809320Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb8-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb8-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Plot with Colored Lines'</span>,</span>
<span id="cb8-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb8-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb8-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb8-7">                                     line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008080'</span>,</span>
<span id="cb8-8">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-9">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis converted to µM</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>That doesn’t look half bad! But what if you want to highlight the IC50 value? That would give people a quick way to identify where the IC50 lies on the curve. That can be achieved using the “box=” parameter. The box argument is a boolean argument and by default it will draw a box at the 50% response with respect to the curve.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.210509Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:19.024251Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb10-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb10-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Plot with Colored Lines'</span>,</span>
<span id="cb10-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb10-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb10-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb10-7">                                     line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008080'</span>,</span>
<span id="cb10-8">                                     box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb10-9">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb10-10">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis converted to µM</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The box highlight can be further modified for color and specific response position you may be interested in. For example, what if you want the box to be red and also highlight IC<img src="https://latex.codecogs.com/png.latex?_%7B60%7D"> or IC<img src="https://latex.codecogs.com/png.latex?_%7B90%7D">? This can be achieved by using the “box_intercept=” and “box_color=” parameters</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.409826Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:19.209766Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb12-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb12-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Plot with More Colors!'</span>,</span>
<span id="cb12-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb12-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (µM)'</span>,</span>
<span id="cb12-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb12-7">                                     line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008080'</span>,</span>
<span id="cb12-8">                                     box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-9">                                     box_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb12-10">                                     box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb12-11">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-12">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis converted to µM</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, the x-axis can be further adjusted.</p>
<p>The scale can be changed from log to linear using the “xscale=” argument, changing the shape of the curve from sigmoid to a normal curve. The units of the scale can be changed to nM using the “xscale_unit=” argument. Currently only µM and nM is used.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.508858Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:19.410633Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb14-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb14-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A Linear Plot'</span>,</span>
<span id="cb14-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb14-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb14-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb14-7">                                     line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008080'</span>,</span>
<span id="cb14-8">                                     box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb14-9">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-10">                                     xscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>,</span>
<span id="cb14-11">                                     xscale_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nM'</span>,</span>
<span id="cb14-12">                                     xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb14-13">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis is in nM
nM with ticks constraints!</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>For this dataset, the “xscale=‘linear’” does not look as good.</p>
<p>Also notice how on the linear plot the xscale_ticks was also adjusted to fit the concentration in nM scale. This was achieved using the “xscale_ticks=” argument. Note that the xscale_ticks will affect how the line curve is drawn and should be adjusted to fit the dataset on the plot. Notice how the plot below has the xscale_ticks ranging from 0 to 2 and how it would affect the resulting curve line.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.748811Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:19.527319Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb16-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb16-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-Axis is Set to nM'</span>,</span>
<span id="cb16-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb16-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb16-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb16-7">                                     line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008080'</span>,</span>
<span id="cb16-8">                                     box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb16-9">                                     box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>,</span>
<span id="cb16-10">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb16-11">                                     xscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>,</span>
<span id="cb16-12">                                     xscale_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nM'</span>,</span>
<span id="cb16-13">                                     xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb16-14">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis is in nM
nM with ticks constraints!</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="saving-the-figure" class="level3">
<h3 class="anchored" data-anchor-id="saving-the-figure">Saving the figure</h3>
<p>Finally, the figure can be saved using the “output_filename=” argument. Change “None” to file path of choice. Images should be saved in .png format.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.918777Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:19.756292Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data.single_curve_plot(concentration_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compound Conc'</span>,</span>
<span id="cb18-2">                                     response_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'% Inhibition Avg'</span>,</span>
<span id="cb18-3">                                     plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-Axis is Set to nM'</span>,</span>
<span id="cb18-4">                                     drug_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Drug 1'</span>,</span>
<span id="cb18-5">                                     xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logarithmic Concentration (nM)'</span>,</span>
<span id="cb18-6">                                     ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inhibition %'</span>,</span>
<span id="cb18-7">                                     line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#008080'</span>,</span>
<span id="cb18-8">                                     box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-9">                                     box_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>,</span>
<span id="cb18-10">                                     legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-11">                                     xscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>,</span>
<span id="cb18-12">                                     xscale_unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'µM'</span>,</span>
<span id="cb18-13">                                     xscale_ticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>),</span>
<span id="cb18-14">                                     output_filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Concentration on X-axis converted to µM
µM with ticks constraints!</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Additionally, the figure can also be saved as follows:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-12-07T08:06:19.966572Z&quot;,&quot;start_time&quot;:&quot;2023-12-07T08:06:19.921198Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">figure.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tutorial_figure_001.png'</span>)</span></code></pre></div>
</div>
<p>And that should be it!</p>
<p>This is my first “big” python project and I learned a lot from it. I know I should clean up the code in the future, but for now, I’m glad to have it up and running! I plan on maintaining this for the foreseeable future. I hope it helps others as much as it has helped me!</p>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <category>py50</category>
  <category>Coding</category>
  <category>Informatics</category>
  <category>Plotting</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/4-py50-single-plot.html</guid>
  <pubDate>Wed, 06 Dec 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing py50!</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/3-announcing-py50.html</link>
  <description><![CDATA[ 



<section id="py50-generate-dose-response-curves" class="level3">
<h3 class="anchored" data-anchor-id="py50-generate-dose-response-curves">py50: Generate Dose-Response Curves</h3>
<p>I would like to announce a new project I have been working on: <a href="https://github.com/tlint101/py50">py50: Generate Dose-Response Curves</a>. It is the first “big” python project that I have worked on. This package will calculate IC50 (py50, get it? … Anyone?) and will plot the dose-response curves. And for anyone who does not know how to code, I created a Streamlit web application(<a href="https://py50-app.streamlit.app">click here</a>). I hope others will be able to find this useful for their own work.</p>
<section id="why-did-i-make-py50" class="level4">
<h4 class="anchored" data-anchor-id="why-did-i-make-py50">Why did I make py50?</h4>
<p>Well, this was mostly for myself. I am lucky to be in a lab that has close collaborations with other labs, meaning that my work can quickly be shared with experts in other areas. They will generate the dose-response curves for me. But sometimes when I organize my figures, I realized that the curves do not fit my style. The color does not match my docking pose, or my protein, or the font could be bigger, etc. Now, I could ask them to change it, but I do not like to be a burden on people. They spent a lot of time doing this work, the least I could do is learn the program they used to generate plot, right?</p>
<p>Well, the truth is I hate using their program (which I will not name here)!</p>
<p>So I went about creating my own. As a python module, it can be customizable to anyone’s workflow. The outcome is perfect for me. After I showed this to my advisor, he made the comment that it would be good for others to use. And I realized that I could easily convert the code for this purpose.</p>
<p>For py50, I have a KNIME workflow. That is available upon request. It is not as elegant, as they are not custom KNIME nodes, so I am a little more reserved in sharing that workflow. Another issue with KNIME is that it would require the user to have python installed on their machine. I realized that could be a hassle. So I also created a Streamlit web application. Using Streamlit has been on my list of things to try for a very long time, and I am glad that with my py50 project, I was able to do that.</p>
<p>The code is not perfect. There is a lot that I need to clean up on the backend. But for what I have, it works and I learned a lot. I am very surprised I got a decent package up and running. The plan is to maintain this for the foreseeable future. And, if the inspiration is right, I will add some extra features over the coming years.</p>
<p>The next few posts will dive into details about py50, the functions, and concepts of IC50 that I ran into.</p>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <category>Streamlit</category>
  <category>py50</category>
  <category>Coding</category>
  <category>Informatics</category>
  <category>Plotting</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/3-announcing-py50.html</guid>
  <pubDate>Mon, 04 Dec 2023 16:00:00 GMT</pubDate>
  <media:content url="https://tlint101.github.io/practice-in-code/posts/img/py50_logo_only.png" medium="image" type="image/png" height="113" width="144"/>
</item>
<item>
  <title>Hello World - Now With Goals!</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/2-hello-world-goals.html</link>
  <description><![CDATA[ 



<section id="hello-world---now-with-goals" class="level3">
<h3 class="anchored" data-anchor-id="hello-world---now-with-goals">Hello World - Now with Goals</h3>
<p>Hello everyone. My name is Tony. I am currently in a Ph.D.&nbsp;program for drug discovery in Taiwan. Why Taiwan? Well, a series of life choices fresh from university led me there. I did not get a start into my field of study overnight. I am a late bloomer. And still learning. Or at least trying to!</p>
<p>I specialize in cheminformatics - using computers to sort and categorize molecules. There’s a lot of good software out there that can help anyone interested into getting into the field. That includes both paid versions, such as <a href="https://www.schrodinger.com/products/maestro">Schrodiner’s Maestro</a>, or open source software such as the wonderful suite available from the <a href="https://www.zbh.uni-hamburg.de/en/forschung/software-server-spgl.html">University of Hamburg</a>. Those tools are great! But I quickly realized that relying on software, as good as they can be, can be very limiting. What if I have an idea that does not fit the available software? What if I want to make modifications to the figures I make? What if I want to try a new screening protocol? There is only one way to do these things - coding! And learning to code requires a lot of practice.</p>
<p>I know that with experience. I have tried learning ot code multiple times in my life. Each time I have failed. There is a whole host of reasons. Maybe the language I chose was not for me. Java, is great, but at the time I can barely wrap my head around it. I tried making a small iOS app in the early days of the iPhone, which used UIKit. No dice. When Apple transitioned into Swift UI, I thought “Great! A new start!” Only to fail horribly.</p>
<p>It was not until I got into the Ph.D.&nbsp;program (and again, I started late!) that I finally tried and… well I did not succeed, but I got way further than before.</p>
<p>What helped was having a project and actually sticking with it. Well, what really helped is that I found a lot of examples online tackling similar problems I had. People writing about their code, sharing new tools and packages, and how to solve them. All of this helped make things simple enough for me to at least get started.</p>
<p>For that, I am forever grateful.</p>
<p><strong>That brings me to this blog. I will use it as a place to practice coding, my thinking and thought processes, what I am interested in, and hopefully, as a way to share with others.</strong></p>
<p>This will be my way of paying it forward.</p>
<p>And barring that, it will be a good place to showcase my failures to the world. I’m ok with that too.</p>


</section>

 ]]></description>
  <category>Thoughts</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/2-hello-world-goals.html</guid>
  <pubDate>Fri, 01 Dec 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Hello World!</title>
  <dc:creator>Tony E. Lin</dc:creator>
  <link>https://tlint101.github.io/practice-in-code/posts/1-hello-world.html</link>
  <description><![CDATA[ 



<section id="hello-world" class="level1">
<h1>Hello World!</h1>


</section>

 ]]></description>
  <category>Thoughts</category>
  <guid>https://tlint101.github.io/practice-in-code/posts/1-hello-world.html</guid>
  <pubDate>Tue, 28 Nov 2023 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
